{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1613705151715},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1612266435328},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1612266435328},{"_id":"source/.DS_Store","hash":"b0d63f8a39aced72ed2fdb4a2ab363b8364a0341","modified":1613706662736},{"_id":"source/_posts/2021-02-19-hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1613705151715},{"_id":"source/_posts/2021-02-19-signed_number_representations.md","hash":"048abd87904beb39948072c0b42f5cce86a11dc7","modified":1613706641582},{"_id":"source/_posts/2021-02-18-hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1613705151715},{"_id":"source/_posts/2021-02-19-signed-number-representations.md","hash":"119292d09e8e892cca8804623cac105ad9db6133","modified":1613706867519}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"符号数在计算机中的表示方法","date":"2021-02-19T03:49:09.000Z","_content":"\n> 参考：\n>\n> https://en.wikipedia.org/wiki/Signed_number_representations\n>\n> https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86\n\n计算机中符号数常用的表示方法：\n\n- 原码\n- 反码\n- 补码\n\n这三种表示方法均有符号位和数值位两部分，符号位都是用0表示\"+\"，用1表示\"-\"。而数值位，三种表示方法各不相同。\n\n\n\n[TOC]\n\n\n\n## 原码\n\n原码是指一个二进制数左边加上符号位后所得到的码，即最高位为符号位。\n\n- 当二进制数大于0时，符号位为0\n\n- 当二进制数小于0时，符号位为1\n\n- 当二进制数等于+0时，符号位为0\n\n- 当二进制数等于-0时，符号位为1\n\n\n\n例如，用8位二进制表示一个数：\n\n```\n+10D = 00001010B\n\n-10D = 10001010B\n\n+127D = 01111111B\n```\n\n\n\n一个n位的原码，可以表示2^n个数（此时+0和-0分别为两个不同的数）。\n\n数值范围是 -(2^(n-1) - 1) ~ (2^(n-1) - 1) 。\n\n\n\n## 反码\n\n反码表示法规定，正数的反码等于其原码，而负数的反码是对原码的数值位按位取反，并保留其符号位。\n\n例如，对二进制原码10001010求反码：\n\n```\n10001010(原码) = 11110101(反码)\n```\n\n在多数计算机中不采用反码表示数值。\n\n\n\n## 补码\n\n在了解补码之前，先来看下，如果使用原码直接参与加减法运算会得到什么结果：\n\n```\n00000010 + 00000010 = 00000100，即 2 + 2 = 4，结果正确\n00000010 + 10000010 = 10000100，即 2 + (-2) = -4，结果错误\n```\n\n可见原码的符号位不能直接参与运算，必须与其他位分开，这就增加了硬件的开销和复杂性。\n\n\n\n### 补码的定义\n\n正数和0的补码就是该数字本身，而负数的补码是对原码的数值位按位取反再加1。\n\n\n\n### 补码的运算\n\n补码的符号位可以直接参与运算，例如：\n\n```\n(0000) 0000 0010 (2)\n  \t           +\n(0000) 1111 1110 (-2)\n  \t           =\n(0001) 0000 0000 (0)\n\n结果正确\n```\n\n```\n(0000) 0000 0010 (2)\n  \t           +\n(0000) 1111 1111 (-1)\n  \t           =\n(0001) 0000 0001 (1)\n\n结果正确\n```\n\n```\n(0000) 0000 0010 (2)\n  \t           +\n(0000) 1111 1101 (-3)\n  \t           =\n(0000) 1111 1111 (-1)\n\n结果正确\n```\n\n\n\n### 补码的数值范围\n\n在原码系统中，0有两种表示方式（以32位的整数类型为例）：\n\n```\n正零：0000 0000 0000 0000 0000 0000 0000 0000\n\n负零：1000 0000 0000 0000 0000 0000 0000 0000\n```\n\n按照负数补码的计算方法，对负零原码的原码的数值位按位取反再加1，可得：\n\n```\n(0001) 0000 0000 0000 0000 0000 0000 0000 0000\n```\n\n由于溢出，可知正零和负零的补码是相同的，没必要区分正零和负零。\n\n**所以，在补码系统中，0只有一种表示方式。**\n\n\n\n因此，在32位的整数类型中，多出了一个数：\n\n```\n1000 0000 0000 0000 0000 0000 0000 0000\n```\n\n同时，在补码系统中，我们知道符号位可以直接参与运算：\n\n```\n(0000) 1000 0000 0000 0000 0000 0000 0000 0001 (-2147483647D)\n                                             +\n(0000) 1111 1111 1111 1111 1111 1111 1111 1111 (-1D)\n                                             =\n(0001) 1000 0000 0000 0000 0000 0000 0000 0000 (-2147483648D)\n```\n\n因此，在补码系统中，100...00 (n - 1个0) 就表示了n位整数类型的最小值。\n\n**一个n位的补码，可以表示2^n个数，其数值范围是 -2^(n-1) ~ (2^(n-1) - 1) 。**\n\n","source":"_posts/2021-02-19-signed-number-representations.md","raw":"---\ntitle: 符号数在计算机中的表示方法\ndate: 2021-02-19 11:49:09\ntags: ComputerScience\n---\n\n> 参考：\n>\n> https://en.wikipedia.org/wiki/Signed_number_representations\n>\n> https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86\n\n计算机中符号数常用的表示方法：\n\n- 原码\n- 反码\n- 补码\n\n这三种表示方法均有符号位和数值位两部分，符号位都是用0表示\"+\"，用1表示\"-\"。而数值位，三种表示方法各不相同。\n\n\n\n[TOC]\n\n\n\n## 原码\n\n原码是指一个二进制数左边加上符号位后所得到的码，即最高位为符号位。\n\n- 当二进制数大于0时，符号位为0\n\n- 当二进制数小于0时，符号位为1\n\n- 当二进制数等于+0时，符号位为0\n\n- 当二进制数等于-0时，符号位为1\n\n\n\n例如，用8位二进制表示一个数：\n\n```\n+10D = 00001010B\n\n-10D = 10001010B\n\n+127D = 01111111B\n```\n\n\n\n一个n位的原码，可以表示2^n个数（此时+0和-0分别为两个不同的数）。\n\n数值范围是 -(2^(n-1) - 1) ~ (2^(n-1) - 1) 。\n\n\n\n## 反码\n\n反码表示法规定，正数的反码等于其原码，而负数的反码是对原码的数值位按位取反，并保留其符号位。\n\n例如，对二进制原码10001010求反码：\n\n```\n10001010(原码) = 11110101(反码)\n```\n\n在多数计算机中不采用反码表示数值。\n\n\n\n## 补码\n\n在了解补码之前，先来看下，如果使用原码直接参与加减法运算会得到什么结果：\n\n```\n00000010 + 00000010 = 00000100，即 2 + 2 = 4，结果正确\n00000010 + 10000010 = 10000100，即 2 + (-2) = -4，结果错误\n```\n\n可见原码的符号位不能直接参与运算，必须与其他位分开，这就增加了硬件的开销和复杂性。\n\n\n\n### 补码的定义\n\n正数和0的补码就是该数字本身，而负数的补码是对原码的数值位按位取反再加1。\n\n\n\n### 补码的运算\n\n补码的符号位可以直接参与运算，例如：\n\n```\n(0000) 0000 0010 (2)\n  \t           +\n(0000) 1111 1110 (-2)\n  \t           =\n(0001) 0000 0000 (0)\n\n结果正确\n```\n\n```\n(0000) 0000 0010 (2)\n  \t           +\n(0000) 1111 1111 (-1)\n  \t           =\n(0001) 0000 0001 (1)\n\n结果正确\n```\n\n```\n(0000) 0000 0010 (2)\n  \t           +\n(0000) 1111 1101 (-3)\n  \t           =\n(0000) 1111 1111 (-1)\n\n结果正确\n```\n\n\n\n### 补码的数值范围\n\n在原码系统中，0有两种表示方式（以32位的整数类型为例）：\n\n```\n正零：0000 0000 0000 0000 0000 0000 0000 0000\n\n负零：1000 0000 0000 0000 0000 0000 0000 0000\n```\n\n按照负数补码的计算方法，对负零原码的原码的数值位按位取反再加1，可得：\n\n```\n(0001) 0000 0000 0000 0000 0000 0000 0000 0000\n```\n\n由于溢出，可知正零和负零的补码是相同的，没必要区分正零和负零。\n\n**所以，在补码系统中，0只有一种表示方式。**\n\n\n\n因此，在32位的整数类型中，多出了一个数：\n\n```\n1000 0000 0000 0000 0000 0000 0000 0000\n```\n\n同时，在补码系统中，我们知道符号位可以直接参与运算：\n\n```\n(0000) 1000 0000 0000 0000 0000 0000 0000 0001 (-2147483647D)\n                                             +\n(0000) 1111 1111 1111 1111 1111 1111 1111 1111 (-1D)\n                                             =\n(0001) 1000 0000 0000 0000 0000 0000 0000 0000 (-2147483648D)\n```\n\n因此，在补码系统中，100...00 (n - 1个0) 就表示了n位整数类型的最小值。\n\n**一个n位的补码，可以表示2^n个数，其数值范围是 -2^(n-1) ~ (2^(n-1) - 1) 。**\n\n","slug":"signed-number-representations","published":1,"updated":"2021-02-19T03:54:27.519Z","_id":"cklbrdfgm0004iaprdebg078e","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>参考：</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Signed_number_representations\">https://en.wikipedia.org/wiki/Signed_number_representations</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86\">https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86</a></p>\n</blockquote>\n<p>计算机中符号数常用的表示方法：</p>\n<ul>\n<li>原码</li>\n<li>反码</li>\n<li>补码</li>\n</ul>\n<p>这三种表示方法均有符号位和数值位两部分，符号位都是用0表示”+”，用1表示”-“。而数值位，三种表示方法各不相同。</p>\n<p>[TOC]</p>\n<h2 id=\"原码\"><a href=\"#原码\" class=\"headerlink\" title=\"原码\"></a>原码</h2><p>原码是指一个二进制数左边加上符号位后所得到的码，即最高位为符号位。</p>\n<ul>\n<li><p>当二进制数大于0时，符号位为0</p>\n</li>\n<li><p>当二进制数小于0时，符号位为1</p>\n</li>\n<li><p>当二进制数等于+0时，符号位为0</p>\n</li>\n<li><p>当二进制数等于-0时，符号位为1</p>\n</li>\n</ul>\n<p>例如，用8位二进制表示一个数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+10D &#x3D; 00001010B</span><br><span class=\"line\"></span><br><span class=\"line\">-10D &#x3D; 10001010B</span><br><span class=\"line\"></span><br><span class=\"line\">+127D &#x3D; 01111111B</span><br></pre></td></tr></table></figure>\n\n\n<p>一个n位的原码，可以表示2^n个数（此时+0和-0分别为两个不同的数）。</p>\n<p>数值范围是 -(2^(n-1) - 1) ~ (2^(n-1) - 1) 。</p>\n<h2 id=\"反码\"><a href=\"#反码\" class=\"headerlink\" title=\"反码\"></a>反码</h2><p>反码表示法规定，正数的反码等于其原码，而负数的反码是对原码的数值位按位取反，并保留其符号位。</p>\n<p>例如，对二进制原码10001010求反码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10001010(原码) &#x3D; 11110101(反码)</span><br></pre></td></tr></table></figure>\n<p>在多数计算机中不采用反码表示数值。</p>\n<h2 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h2><p>在了解补码之前，先来看下，如果使用原码直接参与加减法运算会得到什么结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000010 + 00000010 &#x3D; 00000100，即 2 + 2 &#x3D; 4，结果正确</span><br><span class=\"line\">00000010 + 10000010 &#x3D; 10000100，即 2 + (-2) &#x3D; -4，结果错误</span><br></pre></td></tr></table></figure>\n<p>可见原码的符号位不能直接参与运算，必须与其他位分开，这就增加了硬件的开销和复杂性。</p>\n<h3 id=\"补码的定义\"><a href=\"#补码的定义\" class=\"headerlink\" title=\"补码的定义\"></a>补码的定义</h3><p>正数和0的补码就是该数字本身，而负数的补码是对原码的数值位按位取反再加1。</p>\n<h3 id=\"补码的运算\"><a href=\"#补码的运算\" class=\"headerlink\" title=\"补码的运算\"></a>补码的运算</h3><p>补码的符号位可以直接参与运算，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0000) 0000 0010 (2)</span><br><span class=\"line\">  \t           +</span><br><span class=\"line\">(0000) 1111 1110 (-2)</span><br><span class=\"line\">  \t           &#x3D;</span><br><span class=\"line\">(0001) 0000 0000 (0)</span><br><span class=\"line\"></span><br><span class=\"line\">结果正确</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0000) 0000 0010 (2)</span><br><span class=\"line\">  \t           +</span><br><span class=\"line\">(0000) 1111 1111 (-1)</span><br><span class=\"line\">  \t           &#x3D;</span><br><span class=\"line\">(0001) 0000 0001 (1)</span><br><span class=\"line\"></span><br><span class=\"line\">结果正确</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0000) 0000 0010 (2)</span><br><span class=\"line\">  \t           +</span><br><span class=\"line\">(0000) 1111 1101 (-3)</span><br><span class=\"line\">  \t           &#x3D;</span><br><span class=\"line\">(0000) 1111 1111 (-1)</span><br><span class=\"line\"></span><br><span class=\"line\">结果正确</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"补码的数值范围\"><a href=\"#补码的数值范围\" class=\"headerlink\" title=\"补码的数值范围\"></a>补码的数值范围</h3><p>在原码系统中，0有两种表示方式（以32位的整数类型为例）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正零：0000 0000 0000 0000 0000 0000 0000 0000</span><br><span class=\"line\"></span><br><span class=\"line\">负零：1000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure>\n<p>按照负数补码的计算方法，对负零原码的原码的数值位按位取反再加1，可得：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0001) 0000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure>\n<p>由于溢出，可知正零和负零的补码是相同的，没必要区分正零和负零。</p>\n<p><strong>所以，在补码系统中，0只有一种表示方式。</strong></p>\n<p>因此，在32位的整数类型中，多出了一个数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure>\n<p>同时，在补码系统中，我们知道符号位可以直接参与运算：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0000) 1000 0000 0000 0000 0000 0000 0000 0001 (-2147483647D)</span><br><span class=\"line\">                                             +</span><br><span class=\"line\">(0000) 1111 1111 1111 1111 1111 1111 1111 1111 (-1D)</span><br><span class=\"line\">                                             &#x3D;</span><br><span class=\"line\">(0001) 1000 0000 0000 0000 0000 0000 0000 0000 (-2147483648D)</span><br></pre></td></tr></table></figure>\n<p>因此，在补码系统中，100…00 (n - 1个0) 就表示了n位整数类型的最小值。</p>\n<p><strong>一个n位的补码，可以表示2^n个数，其数值范围是 -2^(n-1) ~ (2^(n-1) - 1) 。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>参考：</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Signed_number_representations\">https://en.wikipedia.org/wiki/Signed_number_representations</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86\">https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86</a></p>\n</blockquote>\n<p>计算机中符号数常用的表示方法：</p>\n<ul>\n<li>原码</li>\n<li>反码</li>\n<li>补码</li>\n</ul>\n<p>这三种表示方法均有符号位和数值位两部分，符号位都是用0表示”+”，用1表示”-“。而数值位，三种表示方法各不相同。</p>\n<p>[TOC]</p>\n<h2 id=\"原码\"><a href=\"#原码\" class=\"headerlink\" title=\"原码\"></a>原码</h2><p>原码是指一个二进制数左边加上符号位后所得到的码，即最高位为符号位。</p>\n<ul>\n<li><p>当二进制数大于0时，符号位为0</p>\n</li>\n<li><p>当二进制数小于0时，符号位为1</p>\n</li>\n<li><p>当二进制数等于+0时，符号位为0</p>\n</li>\n<li><p>当二进制数等于-0时，符号位为1</p>\n</li>\n</ul>\n<p>例如，用8位二进制表示一个数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+10D &#x3D; 00001010B</span><br><span class=\"line\"></span><br><span class=\"line\">-10D &#x3D; 10001010B</span><br><span class=\"line\"></span><br><span class=\"line\">+127D &#x3D; 01111111B</span><br></pre></td></tr></table></figure>\n\n\n<p>一个n位的原码，可以表示2^n个数（此时+0和-0分别为两个不同的数）。</p>\n<p>数值范围是 -(2^(n-1) - 1) ~ (2^(n-1) - 1) 。</p>\n<h2 id=\"反码\"><a href=\"#反码\" class=\"headerlink\" title=\"反码\"></a>反码</h2><p>反码表示法规定，正数的反码等于其原码，而负数的反码是对原码的数值位按位取反，并保留其符号位。</p>\n<p>例如，对二进制原码10001010求反码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10001010(原码) &#x3D; 11110101(反码)</span><br></pre></td></tr></table></figure>\n<p>在多数计算机中不采用反码表示数值。</p>\n<h2 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h2><p>在了解补码之前，先来看下，如果使用原码直接参与加减法运算会得到什么结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000010 + 00000010 &#x3D; 00000100，即 2 + 2 &#x3D; 4，结果正确</span><br><span class=\"line\">00000010 + 10000010 &#x3D; 10000100，即 2 + (-2) &#x3D; -4，结果错误</span><br></pre></td></tr></table></figure>\n<p>可见原码的符号位不能直接参与运算，必须与其他位分开，这就增加了硬件的开销和复杂性。</p>\n<h3 id=\"补码的定义\"><a href=\"#补码的定义\" class=\"headerlink\" title=\"补码的定义\"></a>补码的定义</h3><p>正数和0的补码就是该数字本身，而负数的补码是对原码的数值位按位取反再加1。</p>\n<h3 id=\"补码的运算\"><a href=\"#补码的运算\" class=\"headerlink\" title=\"补码的运算\"></a>补码的运算</h3><p>补码的符号位可以直接参与运算，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0000) 0000 0010 (2)</span><br><span class=\"line\">  \t           +</span><br><span class=\"line\">(0000) 1111 1110 (-2)</span><br><span class=\"line\">  \t           &#x3D;</span><br><span class=\"line\">(0001) 0000 0000 (0)</span><br><span class=\"line\"></span><br><span class=\"line\">结果正确</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0000) 0000 0010 (2)</span><br><span class=\"line\">  \t           +</span><br><span class=\"line\">(0000) 1111 1111 (-1)</span><br><span class=\"line\">  \t           &#x3D;</span><br><span class=\"line\">(0001) 0000 0001 (1)</span><br><span class=\"line\"></span><br><span class=\"line\">结果正确</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0000) 0000 0010 (2)</span><br><span class=\"line\">  \t           +</span><br><span class=\"line\">(0000) 1111 1101 (-3)</span><br><span class=\"line\">  \t           &#x3D;</span><br><span class=\"line\">(0000) 1111 1111 (-1)</span><br><span class=\"line\"></span><br><span class=\"line\">结果正确</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"补码的数值范围\"><a href=\"#补码的数值范围\" class=\"headerlink\" title=\"补码的数值范围\"></a>补码的数值范围</h3><p>在原码系统中，0有两种表示方式（以32位的整数类型为例）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正零：0000 0000 0000 0000 0000 0000 0000 0000</span><br><span class=\"line\"></span><br><span class=\"line\">负零：1000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure>\n<p>按照负数补码的计算方法，对负零原码的原码的数值位按位取反再加1，可得：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0001) 0000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure>\n<p>由于溢出，可知正零和负零的补码是相同的，没必要区分正零和负零。</p>\n<p><strong>所以，在补码系统中，0只有一种表示方式。</strong></p>\n<p>因此，在32位的整数类型中，多出了一个数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure>\n<p>同时，在补码系统中，我们知道符号位可以直接参与运算：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0000) 1000 0000 0000 0000 0000 0000 0000 0001 (-2147483647D)</span><br><span class=\"line\">                                             +</span><br><span class=\"line\">(0000) 1111 1111 1111 1111 1111 1111 1111 1111 (-1D)</span><br><span class=\"line\">                                             &#x3D;</span><br><span class=\"line\">(0001) 1000 0000 0000 0000 0000 0000 0000 0000 (-2147483648D)</span><br></pre></td></tr></table></figure>\n<p>因此，在补码系统中，100…00 (n - 1个0) 就表示了n位整数类型的最小值。</p>\n<p><strong>一个n位的补码，可以表示2^n个数，其数值范围是 -2^(n-1) ~ (2^(n-1) - 1) 。</strong></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/2021-02-18-hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-02-17T16:00:00.000Z","updated":"2021-02-19T03:25:51.715Z","_id":"cklbre54g0006iaprhcpd55q4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cklbrdfgm0004iaprdebg078e","tag_id":"cklbrbk6e0002iapr8c2936pi","_id":"cklbrdfgo0005iaprfjmogjk4"}],"Tag":[{"name":"ComputerScience","_id":"cklbrbk6e0002iapr8c2936pi"}]}}