{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.svg","path":"images/apple-touch-icon.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/blog-avatar.jpg","path":"images/blog-avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/default-avatar.gif","path":"images/default-avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-battery-three-quarters-solid.svg","path":"images/favicon-battery-three-quarters-solid.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/grin-beam-sweat-regular.svg","path":"images/grin-beam-sweat-regular.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-battery-three-quarters-solid.svg","path":"images/logo-battery-three-quarters-solid.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"4e4d7bf4be42db1b7829f0b1438c0d9d2a906a35","modified":1615368429276},{"_id":"source/_drafts/time-complexity.md","hash":"bd7a14baa9ecb9814b3b215ead85290a5298ea36","modified":1616143136046},{"_id":"source/_posts/.DS_Store","hash":"de3cfb5777ea239c5e2795318f5f1196c2dd3f1e","modified":1616735293528},{"_id":"source/_posts/2021-02-18-hello-world.md","hash":"375cabeccbb68577dd2bf0875e0e91cc0c240681","modified":1615277369854},{"_id":"source/_posts/2021-02-19-signed-number-representations.md","hash":"d6adaf1233aa517afc485ea2a1ffefacb2233dbf","modified":1615277369854},{"_id":"source/_posts/2021-03-10-elementary-function.md","hash":"b0088b47946d86e36980f4e1d92d1338351676c1","modified":1616122748251},{"_id":"source/_posts/2021-03-18-hello-world.md","hash":"43859b8a4425f3e136daf4da5baa6b6b557bab1b","modified":1616764061868},{"_id":"source/_posts/2021-03-24-android-display-refresh.md","hash":"92e3865c5b2023484bfdfeecfd05c9f4ae388fd7","modified":1616644341020},{"_id":"source/_posts/2021-03-25-android-sync-barrier.md","hash":"968bb906cd698bfbc11be17a0db58e2d909bbc43","modified":1616764261816},{"_id":"source/categories/index.md","hash":"29e653793b807ae1c092a4e1e000e3143c18b34f","modified":1615277369854},{"_id":"source/tags/index.md","hash":"47f28e8150e19e9fca41b4ada4d07b10b5d3ccc8","modified":1615277369855},{"_id":"source/_posts/2021-03-10-elementary-function/.DS_Store","hash":"e7e1d82885f856c4df675eed58e30e3c2f73fe3a","modified":1616053765333},{"_id":"source/_posts/2021-03-10-elementary-function/constant-function-example-1.png","hash":"55c373adc656ab40de3d6254caa3889f83daf30d","modified":1615463242154},{"_id":"source/_posts/2021-03-10-elementary-function/exponential-function-example-1.png","hash":"5414817c47e8074111a09cfc262354c5e89c7ec3","modified":1615865031412},{"_id":"source/_posts/2021-03-10-elementary-function/exponential-function-example-2.png","hash":"e07d060308e0fe9565a2bc7159d6f71d116d61e3","modified":1615865491659},{"_id":"source/_posts/2021-03-10-elementary-function/logarithmic-function-example-2.png","hash":"d44781054882732d63cf4d091f55ad791aff6553","modified":1615985453826},{"_id":"source/_posts/2021-03-10-elementary-function/logarithmic-function-example-1.png","hash":"aa4861ff8de3896b9a56191f4ffb362bc17c1862","modified":1615985075948},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-1.png","hash":"3f476e9bbe7f0660cdb591a8852d0cf4c4d26d9b","modified":1615462750860},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-3.png","hash":"c6cf26bc00b680a675ea0fb67753ad28e182a2da","modified":1615532219227},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-4.png","hash":"5c98bc47edb22e4f29362aea7fbe742cbddba10d","modified":1615532273687},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-7.png","hash":"9eeb028343bc4861d960fb0555885aa38eb56d6e","modified":1615795241661},{"_id":"source/_posts/2021-03-10-elementary-function/logarithmic-function-example-3.png","hash":"e96d95ece9a7c6c4cd9b9406046bbba6bb66420a","modified":1616053740900},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-2.png","hash":"a165e01dfc0a34615eb0d16138e56194dae0996c","modified":1615464078663},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-5.png","hash":"0d3924bb93913b1219297b81f530b3619ba601f0","modified":1615532750674},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-6.png","hash":"668098f02428d80435c283f45d388902be161dec","modified":1615532929622},{"_id":"themes/next/.DS_Store","hash":"7606faed203a263021bc6e703c7182abd99eede6","modified":1614254822809},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1615277369855},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1615277369855},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1615277369856},{"_id":"themes/next/_config.yml","hash":"62d4eab09d9a160fc6ab4a312f14e8e3c1c2bfd1","modified":1616747926042},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1615277369862},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1615277369887},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1615277369856},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1615277369857},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1615277369857},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1615277369857},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1615277369858},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1615277369858},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1615277369858},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1615277369858},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1615277369862},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1615277369862},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1615277369863},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1615277369863},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1615277369863},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1615277369863},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1615277369863},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1615277369864},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1615277369864},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1615277369864},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1615277369864},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1615277369864},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1615277369865},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1615277369865},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1615277369865},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1615277369865},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1615277369866},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1615277369866},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1615277369866},{"_id":"themes/next/languages/zh-CN.yml","hash":"ccfa3076422eb3176f6437d1726c8bdfb47d515d","modified":1615277369866},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1615277369867},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1615277369867},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1615277369867},{"_id":"themes/next/layout/archive.swig","hash":"654c8c3183141f1d33854abf932ce65276874567","modified":1615277369885},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1615277369885},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1615277369886},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1615277369886},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1615277369886},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1615277369887},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1615277369894},{"_id":"themes/next/source/.DS_Store","hash":"4d0efe53164d971f7998dc349a83838666784a10","modified":1614254824883},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1615277369859},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1615277369859},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1615277369859},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1615277369859},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1615277369860},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1615277369860},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1615277369860},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1615277369860},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1615277369861},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1615277369861},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1615277369861},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1615277369861},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1615277369862},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1615277369868},{"_id":"themes/next/layout/_macro/post.swig","hash":"f2250c52ba7f4c5407a8fe596c506a81d1686382","modified":1615277369868},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1615277369868},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1615277369868},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1615277369869},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1615277369870},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1615277369871},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1615277369873},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1615277369873},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1615277369873},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1615277369874},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1615277369875},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1615277369875},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1615277369876},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1615277369879},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1615277369881},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1615277369881},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1615277369887},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1615277369891},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1615277369892},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1615277369892},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1615277369892},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1615277369892},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1615277369893},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1615277369893},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1615277369893},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1615277369894},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1615277369894},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1615277369894},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1615277369895},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1615277369895},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1615277369895},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1615277369895},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1615277369895},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1615277369896},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1615277369896},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1615277369896},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1615277369896},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1615277369911},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1615277369917},{"_id":"themes/next/source/images/.DS_Store","hash":"294a69515384b339cd3a962a16c9f903a5649162","modified":1614307452503},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1615277369918},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1615277369918},{"_id":"themes/next/source/images/apple-touch-icon.svg","hash":"8293fb6815dd0d4a0024233dea9e884a54692c60","modified":1615277369918},{"_id":"themes/next/source/images/blog-avatar.jpg","hash":"5b33e00552a500b4524574c02fec40717cd16cc7","modified":1615277369919},{"_id":"themes/next/source/images/avatar.jpg","hash":"69ade96200fc246b4380344045d4fe941e76e969","modified":1615277369918},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1615277369919},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1615277369919},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1615277369920},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1615277369920},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1615277369920},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1615277369920},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1615277369921},{"_id":"themes/next/source/images/default-avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1615277369921},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1615277369921},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1615277369921},{"_id":"themes/next/source/images/favicon-battery-three-quarters-solid.svg","hash":"8293fb6815dd0d4a0024233dea9e884a54692c60","modified":1615277369921},{"_id":"themes/next/source/images/grin-beam-sweat-regular.svg","hash":"a2bd6f9258b83d9a4f18d34930cbf1638b3385aa","modified":1615277369922},{"_id":"themes/next/source/images/logo-battery-three-quarters-solid.svg","hash":"8293fb6815dd0d4a0024233dea9e884a54692c60","modified":1615277369922},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1615277369922},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1615277369922},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1615277369922},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1615277369923},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1615277369923},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1615277369923},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1615277369924},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1615277369869},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1615277369924},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1615277369869},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1615277369869},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1615277369869},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1615277369870},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1615277369870},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1615277369870},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1615277369870},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1615277369871},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1615277369871},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1615277369871},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1615277369871},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1615277369872},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1615277369872},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1615277369872},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1615277369872},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1615277369872},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1615277369873},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1615277369874},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1615277369874},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1615277369874},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1615277369875},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1615277369875},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1615277369875},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1615277369876},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1615277369876},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1615277369876},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1615277369876},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1615277369877},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1615277369877},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1615277369878},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1615277369878},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1615277369878},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1615277369879},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1615277369879},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1615277369880},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1615277369880},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1615277369880},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1615277369881},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1615277369882},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1615277369882},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"06aa847371cc5a412dfb4751b354d65f6af7830c","modified":1615277369882},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1615277369883},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1615277369883},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1615277369883},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1615277369884},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1615277369884},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1615277369885},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1615277369888},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1615277369888},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1615277369888},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1615277369889},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1615277369889},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1615277369889},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1615277369890},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1615277369890},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1615277369890},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1615277369891},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"ad00812024767f227066722203a34b0875461cb1","modified":1615277369891},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1615277369916},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1615277369916},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1615277369917},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1615277369917},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1615277369917},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1615277369923},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1615277369924},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1615277369926},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1615277369927},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1615277369897},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1615277369897},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1615277369897},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1615277369902},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1615277369905},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1615277369905},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1615277369907},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1615277369907},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1615277369908},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1615277369909},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1615277369909},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1615277369909},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1615277369909},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1615277369911},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1615277369912},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1615277369912},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1615277369912},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1615277369912},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1615277369912},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1615277369913},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1615277369913},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1615277369913},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1615277369913},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1615277369913},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1615277369914},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1615277369914},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1615277369914},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1615277369914},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1615277369914},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1615277369915},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1615277369915},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1615277369915},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1615277369925},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1615277369925},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1615277369898},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1615277369898},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1615277369898},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1615277369898},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1615277369898},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1615277369902},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1615277369902},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1615277369902},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1615277369903},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1615277369903},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1615277369899},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1615277369899},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1615277369899},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1615277369900},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1615277369900},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1615277369900},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1615277369900},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1615277369901},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1615277369901},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1615277369901},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1615277369901},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1615277369901},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1615277369901},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1615277369903},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1615277369903},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1615277369903},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1615277369904},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1615277369904},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1615277369904},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1615277369904},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1615277369904},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1615277369905},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1615277369905},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1615277369906},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1615277369906},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1615277369906},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1615277369906},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1615277369906},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1615277369907},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1615277369907},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1615277369907},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1615277369908},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1615277369908},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1615277369908},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1615277369908},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1615277369910},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1615277369910},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1615277369910},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1615277369911},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1615277369910},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1615277369911},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1615277369911},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1615277369856},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1615277369925},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1615277369926}],"Category":[{"name":"ComputerScience","_id":"ckmqajiib0005ospremgw2dg8"},{"name":"Algorithm","parent":"ckmqajiib0005ospremgw2dg8","_id":"ckmqajiih000bosprb8jef83j"},{"name":"Mathematics","_id":"ckmqajiij000fosprhs8j4mpk"},{"name":"Android","_id":"ckmqajiik000hosprhv435b47"},{"name":"Framework","parent":"ckmqajiik000hosprhv435b47","_id":"ckmqajiim000nosprdm7f6175"},{"name":"Graphics","parent":"ckmqajiim000nosprdm7f6175","_id":"ckmqajiin000posprc39tdg8b"},{"name":"Handler","parent":"ckmqajiim000nosprdm7f6175","_id":"ckmqajiin000qosprhvu1dtdp"}],"Data":[],"Page":[{"date":"2021-02-23T09:18:35.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ndate: 2021-02-23 17:18:35\ntype: categories\ncomments: false\n---\n","updated":"2021-03-09T08:09:29.854Z","path":"categories/index.html","title":"","layout":"page","_id":"ckmqajii10000osprd2om24n6","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2021-02-23T09:07:17.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ndate: 2021-02-23 17:07:17\ntype: tags\ncomments: false\n---\n","updated":"2021-03-09T08:09:29.855Z","path":"tags/index.html","title":"","layout":"page","_id":"ckmqajii70002osprc96rfvm8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"算法的时间复杂度","date":"2021-03-19T07:19:50.000Z","mathjax":true,"_content":"\n在计算机科学中，算法的时间复杂度是一个与算法输入值大小相关函数，它定性描述该算法的运行时间。\n\n\n\n# 定义\n\n\n\n\n\n# 时间复杂度的表示方法\n\n为了计算时间复杂度，我们通常会估计算法的操作单元数量，每个单元运行的时间都是相同的。因此，总运行时间和算法的操作单元数量最多相差一个常量系数。\n\n时间复杂度常用**渐进符号** $O$ 表示，而且不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。\n\n\n\n","source":"_drafts/time-complexity.md","raw":"---\ntitle: 算法的时间复杂度\ndate: 2021-03-19 15:19:50\ncategories:\n- [ComputerScience, Algorithm]\nmathjax: true\n---\n\n在计算机科学中，算法的时间复杂度是一个与算法输入值大小相关函数，它定性描述该算法的运行时间。\n\n\n\n# 定义\n\n\n\n\n\n# 时间复杂度的表示方法\n\n为了计算时间复杂度，我们通常会估计算法的操作单元数量，每个单元运行的时间都是相同的。因此，总运行时间和算法的操作单元数量最多相差一个常量系数。\n\n时间复杂度常用**渐进符号** $O$ 表示，而且不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。\n\n\n\n","slug":"time-complexity","published":0,"updated":"2021-03-19T08:38:56.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqajii40001ospr0qia225f","content":"<p>在计算机科学中，算法的时间复杂度是一个与算法输入值大小相关函数，它定性描述该算法的运行时间。</p>\n<h1 id=\"定义\">1 定义</h1><h1 id=\"时间复杂度的表示方法\">2 时间复杂度的表示方法</h1><p>为了计算时间复杂度，我们通常会估计算法的操作单元数量，每个单元运行的时间都是相同的。因此，总运行时间和算法的操作单元数量最多相差一个常量系数。</p>\n<p>时间复杂度常用<strong>渐进符号</strong> $O$ 表示，而且不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在计算机科学中，算法的时间复杂度是一个与算法输入值大小相关函数，它定性描述该算法的运行时间。</p>\n<h1 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h1><h1 id=\"时间复杂度的表示方法\"><a href=\"#时间复杂度的表示方法\" class=\"headerlink\" title=\"时间复杂度的表示方法\"></a>时间复杂度的表示方法</h1><p>为了计算时间复杂度，我们通常会估计算法的操作单元数量，每个单元运行的时间都是相同的。因此，总运行时间和算法的操作单元数量最多相差一个常量系数。</p>\n<p>时间复杂度常用<strong>渐进符号</strong> $O$ 表示，而且不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，亦即考察输入值大小趋近无穷时的情况。</p>\n"},{"title":"Hello World","date":"2021-02-18T03:49:09.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/2021-02-18-hello-world.md","raw":"---\ntitle: Hello World\ndate: 2021-02-18 11:49:09\ntags: Test\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2021-03-09T08:09:29.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqajii80003ospr3h2i8ckx","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Quick-Start\">0.1 Quick Start</h2><h3 id=\"Create-a-new-post\">0.1.1 Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\">0.1.2 Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\">0.1.3 Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\">0.1.4 Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"Hello World","date":"2021-03-18T03:49:09.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/2021-03-18-hello-world.md","raw":"---\ntitle: Hello World\ndate: 2021-03-18 11:49:09\ntags: Test\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2021-03-26T13:07:41.868Z","_id":"ckmqajiia0004ospr77rd88mm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"符号数在计算机中的表示方法","date":"2021-02-19T03:49:09.000Z","mathjax":true,"_content":"\n计算机中符号数常用的表示方法：\n\n- 原码\n- 反码\n- 补码\n\n这三种表示方法均有符号位和数值位两部分，符号位都是用 0 表示 \"+\"，用 1 表示 \"-\"。而数值位，三种表示方法各不相同。\n\n<!-- more -->\n\n## 原码\n\n原码是指一个二进制数左边加上符号位后所得到的码，即最高位为符号位。\n\n- 当二进制数大于 0 时，符号位为 0\n\n- 当二进制数小于 0 时，符号位为 1\n\n- 当二进制数等于 +0 时，符号位为 0\n\n- 当二进制数等于 -0 时，符号位为 1\n\n\n\n例如，用 8 位二进制表示一个数：\n\n```\n+10D = 00001010B\n\n-10D = 10001010B\n\n+127D = 01111111B\n```\n\n\n\n一个 n 位的原码，可以表示 ${2}^n$ 个数（此时 +0 和 -0 分别为两个不同的数）。\n\n数值范围是 $\\[\\-\\(\\{2}^{n-1} - 1\\)\\,\\{2}^{n-1} - 1\\]$。\n\n\n## 反码\n\n反码表示法规定，正数的反码等于其原码，而负数的反码是对原码的数值位按位取反，并保留其符号位。\n\n例如，对二进制原码 10001010 求反码：\n\n```\n10001010(原码) = 11110101(反码)\n```\n\n在多数计算机中不采用反码表示数值。\n\n\n\n## 补码\n\n在了解补码之前，先来看下，如果使用原码直接参与加减法运算会得到什么结果：\n\n```\n00000010 + 00000010 = 00000100，即 2 + 2 = 4，结果正确\n00000010 + 10000010 = 10000100，即 2 + (-2) = -4，结果错误\n```\n\n可见原码的符号位不能直接参与运算，必须与其他位分开，这就增加了硬件的开销和复杂性。\n\n\n\n### 补码的定义\n\n正数和 0 的补码就是该数字本身，而负数的补码是对原码的数值位按位取反再加 1。\n\n\n\n### 补码的运算\n\n补码的符号位可以直接参与运算，例如：\n\n```\n  (0000) 0000 0010 (2D)\n+ (0000) 1111 1110 (-2D)\n------------------------\n  (0001) 0000 0000 (0D)\n\n结果正确\n```\n\n```\n  (0000) 0000 0010 (2D)\n+ (0000) 1111 1111 (-1D)\n------------------------\n  (0001) 0000 0001 (1D)\n\n结果正确\n```\n\n```\n  (0000) 0000 0010 (2D)\n+ (0000) 1111 1101 (-3D)\n------------------------\n  (0000) 1111 1111 (-1D)\n\n结果正确\n```\n\n### 补码的数值范围\n\n在原码系统中，0 有两种表示方式（以 32 位的整数类型为例）：\n\n```\n正零：0000 0000 0000 0000 0000 0000 0000 0000\n\n负零：1000 0000 0000 0000 0000 0000 0000 0000\n```\n\n按照负数补码的计算方法，对负零原码的数值位按位取反再加 1，可得：\n\n```\n(0001) 0000 0000 0000 0000 0000 0000 0000 0000\n```\n\n由于溢出，可知正零和负零的补码是相同的，没必要区分正零和负零。\n\n**所以，在补码系统中，0只有一种表示方式。**\n\n\n\n因此，在32位的整数类型中，多出了一个数：\n\n```\n1000 0000 0000 0000 0000 0000 0000 0000\n```\n\n同时，在补码系统中，我们知道符号位可以直接参与运算：\n\n```\n  (0000) 1000 0000 0000 0000 0000 0000 0000 0001 (-2147483647D)\n+ (0000) 1111 1111 1111 1111 1111 1111 1111 1111 (-1D)\n---------------------------------------------------------------\n  (0001) 1000 0000 0000 0000 0000 0000 0000 0000 (-2147483648D)\n```\n于是，在补码系统中，$1$$\\underbrace{ 00\\cdots00 }_{n-1}$ 就表示了 n 位整数类型的最小值。\n\n**一个 n 位的补码，可以表示 $2^n$ 个数，其数值范围是 $\\[\\{-2}^{n-1}\\,\\{2}^{n-1} - 1\\]$。**\n\n> 参考：\n>\n> https://en.wikipedia.org/wiki/Signed_number_representations\n>\n> https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86\n","source":"_posts/2021-02-19-signed-number-representations.md","raw":"---\ntitle: 符号数在计算机中的表示方法\ndate: 2021-02-19 11:49:09\ntags:\n- ComputerScience\nmathjax: true\n---\n\n计算机中符号数常用的表示方法：\n\n- 原码\n- 反码\n- 补码\n\n这三种表示方法均有符号位和数值位两部分，符号位都是用 0 表示 \"+\"，用 1 表示 \"-\"。而数值位，三种表示方法各不相同。\n\n<!-- more -->\n\n## 原码\n\n原码是指一个二进制数左边加上符号位后所得到的码，即最高位为符号位。\n\n- 当二进制数大于 0 时，符号位为 0\n\n- 当二进制数小于 0 时，符号位为 1\n\n- 当二进制数等于 +0 时，符号位为 0\n\n- 当二进制数等于 -0 时，符号位为 1\n\n\n\n例如，用 8 位二进制表示一个数：\n\n```\n+10D = 00001010B\n\n-10D = 10001010B\n\n+127D = 01111111B\n```\n\n\n\n一个 n 位的原码，可以表示 ${2}^n$ 个数（此时 +0 和 -0 分别为两个不同的数）。\n\n数值范围是 $\\[\\-\\(\\{2}^{n-1} - 1\\)\\,\\{2}^{n-1} - 1\\]$。\n\n\n## 反码\n\n反码表示法规定，正数的反码等于其原码，而负数的反码是对原码的数值位按位取反，并保留其符号位。\n\n例如，对二进制原码 10001010 求反码：\n\n```\n10001010(原码) = 11110101(反码)\n```\n\n在多数计算机中不采用反码表示数值。\n\n\n\n## 补码\n\n在了解补码之前，先来看下，如果使用原码直接参与加减法运算会得到什么结果：\n\n```\n00000010 + 00000010 = 00000100，即 2 + 2 = 4，结果正确\n00000010 + 10000010 = 10000100，即 2 + (-2) = -4，结果错误\n```\n\n可见原码的符号位不能直接参与运算，必须与其他位分开，这就增加了硬件的开销和复杂性。\n\n\n\n### 补码的定义\n\n正数和 0 的补码就是该数字本身，而负数的补码是对原码的数值位按位取反再加 1。\n\n\n\n### 补码的运算\n\n补码的符号位可以直接参与运算，例如：\n\n```\n  (0000) 0000 0010 (2D)\n+ (0000) 1111 1110 (-2D)\n------------------------\n  (0001) 0000 0000 (0D)\n\n结果正确\n```\n\n```\n  (0000) 0000 0010 (2D)\n+ (0000) 1111 1111 (-1D)\n------------------------\n  (0001) 0000 0001 (1D)\n\n结果正确\n```\n\n```\n  (0000) 0000 0010 (2D)\n+ (0000) 1111 1101 (-3D)\n------------------------\n  (0000) 1111 1111 (-1D)\n\n结果正确\n```\n\n### 补码的数值范围\n\n在原码系统中，0 有两种表示方式（以 32 位的整数类型为例）：\n\n```\n正零：0000 0000 0000 0000 0000 0000 0000 0000\n\n负零：1000 0000 0000 0000 0000 0000 0000 0000\n```\n\n按照负数补码的计算方法，对负零原码的数值位按位取反再加 1，可得：\n\n```\n(0001) 0000 0000 0000 0000 0000 0000 0000 0000\n```\n\n由于溢出，可知正零和负零的补码是相同的，没必要区分正零和负零。\n\n**所以，在补码系统中，0只有一种表示方式。**\n\n\n\n因此，在32位的整数类型中，多出了一个数：\n\n```\n1000 0000 0000 0000 0000 0000 0000 0000\n```\n\n同时，在补码系统中，我们知道符号位可以直接参与运算：\n\n```\n  (0000) 1000 0000 0000 0000 0000 0000 0000 0001 (-2147483647D)\n+ (0000) 1111 1111 1111 1111 1111 1111 1111 1111 (-1D)\n---------------------------------------------------------------\n  (0001) 1000 0000 0000 0000 0000 0000 0000 0000 (-2147483648D)\n```\n于是，在补码系统中，$1$$\\underbrace{ 00\\cdots00 }_{n-1}$ 就表示了 n 位整数类型的最小值。\n\n**一个 n 位的补码，可以表示 $2^n$ 个数，其数值范围是 $\\[\\{-2}^{n-1}\\,\\{2}^{n-1} - 1\\]$。**\n\n> 参考：\n>\n> https://en.wikipedia.org/wiki/Signed_number_representations\n>\n> https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86\n","slug":"signed-number-representations","published":1,"updated":"2021-03-09T08:09:29.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqajiid0007osprhhlkendk","content":"<p>计算机中符号数常用的表示方法：</p>\n<ul>\n<li>原码</li>\n<li>反码</li>\n<li>补码</li>\n</ul>\n<p>这三种表示方法均有符号位和数值位两部分，符号位都是用 0 表示 “+”，用 1 表示 “-“。而数值位，三种表示方法各不相同。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"原码\">0.1 原码</h2><p>原码是指一个二进制数左边加上符号位后所得到的码，即最高位为符号位。</p>\n<ul>\n<li><p>当二进制数大于 0 时，符号位为 0</p>\n</li>\n<li><p>当二进制数小于 0 时，符号位为 1</p>\n</li>\n<li><p>当二进制数等于 +0 时，符号位为 0</p>\n</li>\n<li><p>当二进制数等于 -0 时，符号位为 1</p>\n</li>\n</ul>\n<p>例如，用 8 位二进制表示一个数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+10D &#x3D; 00001010B</span><br><span class=\"line\"></span><br><span class=\"line\">-10D &#x3D; 10001010B</span><br><span class=\"line\"></span><br><span class=\"line\">+127D &#x3D; 01111111B</span><br></pre></td></tr></table></figure>\n\n\n<p>一个 n 位的原码，可以表示 ${2}^n$ 个数（此时 +0 和 -0 分别为两个不同的数）。</p>\n<p>数值范围是 $[-({2}^{n-1} - 1),{2}^{n-1} - 1]$。</p>\n<h2 id=\"反码\">0.2 反码</h2><p>反码表示法规定，正数的反码等于其原码，而负数的反码是对原码的数值位按位取反，并保留其符号位。</p>\n<p>例如，对二进制原码 10001010 求反码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10001010(原码) &#x3D; 11110101(反码)</span><br></pre></td></tr></table></figure>\n<p>在多数计算机中不采用反码表示数值。</p>\n<h2 id=\"补码\">0.3 补码</h2><p>在了解补码之前，先来看下，如果使用原码直接参与加减法运算会得到什么结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000010 + 00000010 &#x3D; 00000100，即 2 + 2 &#x3D; 4，结果正确</span><br><span class=\"line\">00000010 + 10000010 &#x3D; 10000100，即 2 + (-2) &#x3D; -4，结果错误</span><br></pre></td></tr></table></figure>\n<p>可见原码的符号位不能直接参与运算，必须与其他位分开，这就增加了硬件的开销和复杂性。</p>\n<h3 id=\"补码的定义\">0.3.1 补码的定义</h3><p>正数和 0 的补码就是该数字本身，而负数的补码是对原码的数值位按位取反再加 1。</p>\n<h3 id=\"补码的运算\">0.3.2 补码的运算</h3><p>补码的符号位可以直接参与运算，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  (0000) 0000 0010 (2D)</span><br><span class=\"line\">+ (0000) 1111 1110 (-2D)</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">  (0001) 0000 0000 (0D)</span><br><span class=\"line\"></span><br><span class=\"line\">结果正确</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  (0000) 0000 0010 (2D)</span><br><span class=\"line\">+ (0000) 1111 1111 (-1D)</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">  (0001) 0000 0001 (1D)</span><br><span class=\"line\"></span><br><span class=\"line\">结果正确</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  (0000) 0000 0010 (2D)</span><br><span class=\"line\">+ (0000) 1111 1101 (-3D)</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">  (0000) 1111 1111 (-1D)</span><br><span class=\"line\"></span><br><span class=\"line\">结果正确</span><br></pre></td></tr></table></figure>\n<h3 id=\"补码的数值范围\">0.3.3 补码的数值范围</h3><p>在原码系统中，0 有两种表示方式（以 32 位的整数类型为例）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正零：0000 0000 0000 0000 0000 0000 0000 0000</span><br><span class=\"line\"></span><br><span class=\"line\">负零：1000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure>\n<p>按照负数补码的计算方法，对负零原码的数值位按位取反再加 1，可得：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0001) 0000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure>\n<p>由于溢出，可知正零和负零的补码是相同的，没必要区分正零和负零。</p>\n<p><strong>所以，在补码系统中，0只有一种表示方式。</strong></p>\n<p>因此，在32位的整数类型中，多出了一个数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure>\n<p>同时，在补码系统中，我们知道符号位可以直接参与运算：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  (0000) 1000 0000 0000 0000 0000 0000 0000 0001 (-2147483647D)</span><br><span class=\"line\">+ (0000) 1111 1111 1111 1111 1111 1111 1111 1111 (-1D)</span><br><span class=\"line\">---------------------------------------------------------------</span><br><span class=\"line\">  (0001) 1000 0000 0000 0000 0000 0000 0000 0000 (-2147483648D)</span><br></pre></td></tr></table></figure>\n<p>于是，在补码系统中，$1$$\\underbrace{ 00\\cdots00 }_{n-1}$ 就表示了 n 位整数类型的最小值。</p>\n<p><strong>一个 n 位的补码，可以表示 $2^n$ 个数，其数值范围是 $[{-2}^{n-1},{2}^{n-1} - 1]$。</strong></p>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Signed_number_representations\">https://en.wikipedia.org/wiki/Signed_number_representations</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86\">https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>计算机中符号数常用的表示方法：</p>\n<ul>\n<li>原码</li>\n<li>反码</li>\n<li>补码</li>\n</ul>\n<p>这三种表示方法均有符号位和数值位两部分，符号位都是用 0 表示 “+”，用 1 表示 “-“。而数值位，三种表示方法各不相同。</p>","more":"<h2 id=\"原码\"><a href=\"#原码\" class=\"headerlink\" title=\"原码\"></a>原码</h2><p>原码是指一个二进制数左边加上符号位后所得到的码，即最高位为符号位。</p>\n<ul>\n<li><p>当二进制数大于 0 时，符号位为 0</p>\n</li>\n<li><p>当二进制数小于 0 时，符号位为 1</p>\n</li>\n<li><p>当二进制数等于 +0 时，符号位为 0</p>\n</li>\n<li><p>当二进制数等于 -0 时，符号位为 1</p>\n</li>\n</ul>\n<p>例如，用 8 位二进制表示一个数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+10D &#x3D; 00001010B</span><br><span class=\"line\"></span><br><span class=\"line\">-10D &#x3D; 10001010B</span><br><span class=\"line\"></span><br><span class=\"line\">+127D &#x3D; 01111111B</span><br></pre></td></tr></table></figure>\n\n\n<p>一个 n 位的原码，可以表示 ${2}^n$ 个数（此时 +0 和 -0 分别为两个不同的数）。</p>\n<p>数值范围是 $[-({2}^{n-1} - 1),{2}^{n-1} - 1]$。</p>\n<h2 id=\"反码\"><a href=\"#反码\" class=\"headerlink\" title=\"反码\"></a>反码</h2><p>反码表示法规定，正数的反码等于其原码，而负数的反码是对原码的数值位按位取反，并保留其符号位。</p>\n<p>例如，对二进制原码 10001010 求反码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10001010(原码) &#x3D; 11110101(反码)</span><br></pre></td></tr></table></figure>\n<p>在多数计算机中不采用反码表示数值。</p>\n<h2 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h2><p>在了解补码之前，先来看下，如果使用原码直接参与加减法运算会得到什么结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000010 + 00000010 &#x3D; 00000100，即 2 + 2 &#x3D; 4，结果正确</span><br><span class=\"line\">00000010 + 10000010 &#x3D; 10000100，即 2 + (-2) &#x3D; -4，结果错误</span><br></pre></td></tr></table></figure>\n<p>可见原码的符号位不能直接参与运算，必须与其他位分开，这就增加了硬件的开销和复杂性。</p>\n<h3 id=\"补码的定义\"><a href=\"#补码的定义\" class=\"headerlink\" title=\"补码的定义\"></a>补码的定义</h3><p>正数和 0 的补码就是该数字本身，而负数的补码是对原码的数值位按位取反再加 1。</p>\n<h3 id=\"补码的运算\"><a href=\"#补码的运算\" class=\"headerlink\" title=\"补码的运算\"></a>补码的运算</h3><p>补码的符号位可以直接参与运算，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  (0000) 0000 0010 (2D)</span><br><span class=\"line\">+ (0000) 1111 1110 (-2D)</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">  (0001) 0000 0000 (0D)</span><br><span class=\"line\"></span><br><span class=\"line\">结果正确</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  (0000) 0000 0010 (2D)</span><br><span class=\"line\">+ (0000) 1111 1111 (-1D)</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">  (0001) 0000 0001 (1D)</span><br><span class=\"line\"></span><br><span class=\"line\">结果正确</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  (0000) 0000 0010 (2D)</span><br><span class=\"line\">+ (0000) 1111 1101 (-3D)</span><br><span class=\"line\">------------------------</span><br><span class=\"line\">  (0000) 1111 1111 (-1D)</span><br><span class=\"line\"></span><br><span class=\"line\">结果正确</span><br></pre></td></tr></table></figure>\n<h3 id=\"补码的数值范围\"><a href=\"#补码的数值范围\" class=\"headerlink\" title=\"补码的数值范围\"></a>补码的数值范围</h3><p>在原码系统中，0 有两种表示方式（以 32 位的整数类型为例）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正零：0000 0000 0000 0000 0000 0000 0000 0000</span><br><span class=\"line\"></span><br><span class=\"line\">负零：1000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure>\n<p>按照负数补码的计算方法，对负零原码的数值位按位取反再加 1，可得：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0001) 0000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure>\n<p>由于溢出，可知正零和负零的补码是相同的，没必要区分正零和负零。</p>\n<p><strong>所以，在补码系统中，0只有一种表示方式。</strong></p>\n<p>因此，在32位的整数类型中，多出了一个数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1000 0000 0000 0000 0000 0000 0000 0000</span><br></pre></td></tr></table></figure>\n<p>同时，在补码系统中，我们知道符号位可以直接参与运算：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  (0000) 1000 0000 0000 0000 0000 0000 0000 0001 (-2147483647D)</span><br><span class=\"line\">+ (0000) 1111 1111 1111 1111 1111 1111 1111 1111 (-1D)</span><br><span class=\"line\">---------------------------------------------------------------</span><br><span class=\"line\">  (0001) 1000 0000 0000 0000 0000 0000 0000 0000 (-2147483648D)</span><br></pre></td></tr></table></figure>\n<p>于是，在补码系统中，$1$$\\underbrace{ 00\\cdots00 }_{n-1}$ 就表示了 n 位整数类型的最小值。</p>\n<p><strong>一个 n 位的补码，可以表示 $2^n$ 个数，其数值范围是 $[{-2}^{n-1},{2}^{n-1} - 1]$。</strong></p>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Signed_number_representations\">https://en.wikipedia.org/wiki/Signed_number_representations</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86\">https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86</a></p>\n</blockquote>"},{"title":"基本初等函数","date":"2021-03-10T07:54:36.000Z","mathjax":true,"_content":"\n**高等数学**将基本初等函数归为五类：幂函数、指数函数、对数函数、三角函数、反三角函数。\n**数学分析**将基本初等函数归为六类：常函数、幂函数、指数函数、对数函数、三角函数、反三角函数。\n接下来将按照**数学分析**的分类，逐一介绍这些函数。\n\n\n\n<!-- more -->\n\n# 基本初等函数\n\n## 常函数\n\n常函数是指不管自变量值如何变化，函数值都不变的函数。\n\n形式为 $f(x)=C$，其中 $C$ 为常数，定义域为$(-\\infty,+\\infty)$。\n\n### 图像\n\n{% asset_img constant-function-example-1.png 300 300 %}\n\n$$f(x)=1$$\n\n\n\n## 幂函数\n\n幂函数是以底数为自变量，幂为因变量，指数为常数的函数。\n\n形式为 $f(x)=x^α$（$a$ 可以是任意实数或者复数）。\n\n### 有理数指数幂\n\n当指数 $a$ 是有理数时，幂函数可以写作如下形式：\n\n$f(x)=x^{k\\frac{m}{n}}(k\\in\\lbrace-1,1,0\\rbrace,m,n\\in{N}^{*})$\n\n|       |  定义域   |  值域   | 奇偶性 | 图像 |\n| :---: | :----: | :----: | :----: | ------ |\n| $k=1,m,n$ 均为奇数 | $R$ | $R$ | 奇函数 | {% asset_img power-function-example-1.png 300 300 %} $$red:f(x)=x^\\frac{1}{3}$$$$blue:f(x)=x^{3}$$ |\n| $k=-1,m,n$ 均为奇数 | $(-\\infty,0)\\cup(0,+\\infty)$ | $(-\\infty,0)\\cup(0,+\\infty)$ | 奇函数 | {% asset_img power-function-example-2.png 300 300 %} $$red:f(x)=x^{-\\frac{1}{3}}$$$$blue:f(x)=x^{-3}$$ |\n| $k=1,m$ 为奇数$,n$ 为偶数 | $[0,+\\infty)$ | $[0,+\\infty)$ | 非奇非偶函数 | {% asset_img power-function-example-3.png 300 300 %} $$red:f(x)=x^{\\frac{3}{2}}$$$$blue:f(x)=x^{\\frac{1}{2}}$$$$green:f(x)=x^{\\frac{5}{2}}$$ |\n| $k=-1,m$ 为奇数$,n$ 为偶数 | $(0,+\\infty)$ | $(0,+\\infty)$ | 非奇非偶函数 | {% asset_img power-function-example-4.png 300 300 %} $$red:f(x)=x^{-\\frac{3}{2}}$$$$blue:f(x)=x^{-\\frac{1}{2}}$$$$green:f(x)=x^{-\\frac{5}{2}}$$ |\n| $k=1,m$ 为偶数$,n$ 为奇数 | $R$ | $[0,+\\infty)$ | 偶函数 | {% asset_img power-function-example-5.png 300 300 %} $$red:f(x)=x^{\\frac{4}{3}}$$$$blue:f(x)=x^{\\frac{2}{3}}$$$$green:f(x)=x^{2}$$ |\n| $k=-1,m$ 为偶数$,n$ 为奇数 | $(-\\infty,0)\\cup(0,+\\infty)$ | $(0,+\\infty)$ | 偶函数 | {% asset_img power-function-example-6.png 300 300 %} $$red:f(x)=x^{-\\frac{4}{3}}$$$$blue:f(x)=x^{-\\frac{2}{3}}$$$$green:f(x)=x^{-2}$$ |\n| $k=0$ | $(-\\infty,0)\\cup(0,+\\infty)$ | $\\lbrace1\\rbrace$ | 偶函数 | {% asset_img power-function-example-7.png 300 300 %} $$red:f(x)=x^{0}$$注意，$f(x)=x^{0}$ 的图像并不是直线，而是直线 $y=1$ 去掉一点 $(0,1)$ |\n\n\n\n## 指数函数\n\n一般地，指数函数的形式为 $f(x)=b^x$（$b$ 为常数且 $b\\in(0,1)\\cup(1,+\\infty)$），函数的定义域为 $R$，值域为 $(0,+\\infty)$。\n\n注意，在指数函数的定义表达式中，在 $b^x$ 前的系数必须为 $1$，自变量 $x$ 必须在指数的位置上，且不能为 $x$ 的其他表达式，否则，就不是指数函数。\n\n### 图像\n|       |  值域   | 图像 |\n| :---: | :----: | ------ |\n| $0<b<1$ | $(0,+\\infty)$ | {% asset_img exponential-function-example-1.png 300 300 %} $$red:f(x)=\\frac{1}{2}^x$$$$blue:f(x)=\\frac{1}{4}^x$$ |\n| $b>1$ | $(0,+\\infty)$ | {% asset_img exponential-function-example-2.png 300 300 %} $$red:f(x)=2^x$$$$blue:f(x)=4^x$$ |\n\n### 性质\n\n#### 性质 1\n\n由指数函数的定义：\n\n​\t$e^x=\\lim_{n \\to \\infty}(1+\\frac{x}{n})^{n}$\n\n可以得出以下定律：\n\n​\t$e^0=1$\n\n​\t$e^1=e$\n\n​\t$e^{x+y}=e^xe^y$\n\n​\t$e^{xy}=(e^x)^y$\n\n​\t$\\frac{e^x}{e^y}=e^{x-y}$\n\n​\t$e^{-x}=e^{0-x}=\\frac{e^0}{e^x}=\\frac{1}{e^x}$\n\n其中 $x\\in{R},y\\in{R}$。\n\n\n\n#### 性质 2\n\n因为在指数函数的定义中 $x$ 是实数，可以使用自然对数 $e$，把更一般的指数函数，即正实数的实数幂函数定义为\n\n$b^x=(e^{\\ln{b}})^x=e^{x\\ln{b}}$\n\n\n\n#### 性质 3\n\n定义于所有的 $b>0$，和所有的实数 $x$。它叫做\"底数为 $b$ 的指数函数\"。从而拓展了通过乘方和方根运算定义的正实数的有理数幂函数：\n\n$b^{\\frac{m}{n}=\\sqrt[n]{b^m}}$\n\n而方根运算可通过自然对数和指数函数来表示：\n\n$\\sqrt[n]{b}=b^{\\frac{1}{n}}=(e^{\\ln{b}})^{\\frac{1}{n}}=e^{\\frac{\\ln{b}}{n}}$\n\n\n\n## 对数函数\n\n对数是幂运算的逆运算。\n\n如果 $b^x=N(b>0,且b\\neq1)$，那么 $x$ 叫做以 $b$ 为底 $N$ 的对数，记作 $x=\\log_{b}{N}$，读作以 $b$ 为底 $N$ 的对数，其中 $b$ 叫做对数的底，$N$ 叫做幂或者真数。\n\n一般地，对数函数的形式为 $f(x)=\\log_{b}{x}(b>0,且b\\neq1)$，函数的定义域为 $(0,+\\infty)$，值域为 $R$ 。\n\n对数函数实际上就是指数函数的反函数，可表示为 $x=b^y$。因此指数函数里对于常数 $b$ 的规定，同样适用于对数函数。\n\n### 图像\n|       |  值域   | 图像 |\n| :---: | :----: | ------ |\n| $0<b<1$ | $R$ | {% asset_img logarithmic-function-example-1.png 300 300 %} $$red:f(x)=\\log_{\\frac{1}{2}}{x}$$$$blue:f(x)=\\log_{\\frac{1}{4}}{x}$$ |\n| $b>1$ | $R$ | {% asset_img logarithmic-function-example-2.png 300 300 %} $$red:f(x)=\\log_{2}{x}$$$$blue:f(x)=\\log_{4}{x}$$ |\n\n### 性质\n\n- 对数函数的函数图像恒定过点$(1,0)$\n\n- 当 $0<b<1$ 时，函数在定义域 $(0,+\\infty)$ 上为单调减函数；$b>1$ 时，函数在定义域 $(0,+\\infty)$ 上为单调增函数\n\n- 对数函数 $f(x)=\\log_{b}{x}(b>0,b\\neq1,x>0)$\n\n  当 $0<b<1,0<x<1$ 时，$f(x)=\\log_{b}{x}>0$\n  \n  当 $b>1, x>1$ 时，$f(x)=\\log_{b}{x}>0$\n  \n  当 $0<b<1, x>1$ 时，$f(x)=\\log_{b}{x}<0$\n  \n  当 $b>1, 0<x<1$ 时，$f(x)=\\log_{b}{x}<0$\n  \n- 底数为 $b$ 的对数函数$f(x)=\\log_{b}{x}与$指数函数 $f(x)=b^x$ 互为反函数，两者的函数图像关于直线 $y = x$ 对称。\n\n{% asset_img logarithmic-function-example-3.png 300 300 %} $$red:f(x)=\\log_{2}{x}$$$$blue:f(x)=2^{x}$$$$green:f(x)=\\log_{\\frac{1}{2}}{x}$$$$blue:f(x)={\\frac{1}{2}}^{x}$$\n\n### 公式\n\n#### 换底公式\n\n$\\log_{b}{x}=\\frac{\\log_{k}{x}}{\\log_{k}{b}}$\n\n##### 证明\n\n由对数函数的定义，可得：\n\n$x=b^{\\log_{b}{x}}$\n\n等式两边同时以 $k$ 为底取对数，可得：\n\n$\\log_{k}{x}=\\log_{k}({b^{\\log_{b}{x}})}$\n\n$\\because b^x=N(b>0,且b\\neq1)$，有 $x=\\log_{b}{N}$。\n\n那么 $(b^x)^t=b^{xt}=N^t\\ (t\\in{R})$，可得：\n\n$xt=\\log_{b}{N^t}=t\\log_{b}{N}\\ (t\\in{R})$\n\n$\\therefore\\log_{k}{x}=\\log_{k}{b^{\\log_{b}{x}}}=\\log_{b}{x}\\log_{k}{b}$\n\n$\\log_{b}{x}=\\frac{\\log_{k}{x}}{\\log_{k}{b}}$ 得证。\n\n\n\n#### 和差\n\n$\\log_{b}{MN}=\\log_{b}{M}+\\log_{b}{N}$\n\n$\\log_{b}{\\frac{M}{N}}=\\log_{b}{M}-\\log_{b}{N}$\n\n##### 证明\n\n设 $M=\\beta^{m},N=\\beta^{n}$\n\n则 $\\log_{b}{MN}=\\log_{b}({\\beta^{m}\\beta^{n}})$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}({\\beta^{m+n}})$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =(m+n)\\log_{b}{\\beta}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =m\\log_{b}{\\beta}+n\\log_{b}{\\beta}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{\\beta^m}+\\log_{b}{\\beta^n}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{M}+\\log_{b}{N}$\n\n$\\log_{b}{\\frac{M}{N}}=\\log_{b}{M}+\\log_{b}{\\frac{1}{N}}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{M}+\\log_{b}{N^{-1}}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{M}-\\log_{b}{N}$\n\n\n\n#### 次方公式\n\n$\\log_{b^N}({x^M})=\\frac{M}{N}\\log_{b}{x}$\n\n##### 证明\n\n由换底公式，可得：\n\n$\\log_{b^N}({x^M})=\\frac{\\ln{b^N}}{\\ln{x^M}}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\frac{N\\ln{b}}{M\\ln{x}}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\frac{M}{N}\\log_{b}{x}$\n\n##### \n\n#### 还原\n\n$b^{\\log_{b}{x}}=x$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{b^x}$\n\n\n\n#### 互换\n\n$M^{\\log_{b}{N}} = N^{\\log_{b}{M}}$\n\n##### 证明\n\n设 $\\alpha=\\log_{b}{N},\\  \\beta=\\log_{b}{M}$，则有 $b^\\alpha=N,\\ b^\\beta=M, \\ (b^\\beta)^\\alpha=(b^\\alpha)^\\beta$，\n\n$\\therefore M^{\\log_{b}{N}} = N^{\\log_{b}{M}}$\n\n\n\n#### 倒数\n\n$\\log_{b}{\\theta}=\\frac{\\ln \\theta}{\\ln b}=\\frac{1}{\\frac{\\ln b}{\\ln \\theta}}=\\frac{1}{\\log_{\\theta}{b}}$\n\n\n\n## 三角函数\n\n<!--TODO-->\n\n\n\n## 反三角函数\n\n<!--TODO-->\n\n\n\n# 初等函数\n\n初等函数是由**基本初等函数**经过有限次的有理运算（加、减、乘、除、有理数次乘方、有理数次开方）及有限次函数复合所产生、并且在定义域上能用一个解析式表示的函数。\n\n基本初等函数和初等函数在其定义区间内均为**连续函数**。\n\n一般来说，分段函数不是初等函数，因为在这些分段函数的定义域上不能用一个解析式表示。\n\n\n\n\n> 参考：\n>\n> https://baike.baidu.com/item/%E5%9F%BA%E6%9C%AC%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0\n>\n> https://zh.wikipedia.org/wiki/%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0\n\n\n<style>\n  table {\n    width: 1100px; /*表格宽度*/\n    max-width: 1100px; /*表格最大宽度，避免表格过宽*/\n    border: 1px solid #dedede; /*表格外边框设置*/\n    margin: 1px auto; /*外边距*/\n    border-collapse: collapse; /*使用单一线条的边框*/\n    empty-cells: show; /*单元格无内容依旧绘制边框*/\n  }\n  table th,\n  table td {\n    height: 35px; /*统一每一行的默认高度*/\n    border: 1px solid #dedede; /*内部边框样式*/\n    padding: 0 10px; /*内边距*/\n  }\n  table th {\n    font-weight: bold; /*加粗*/\n    text-align: center !important; /*内容居中，加上 !important 避免被 Markdown 样式覆盖*/\n    background: #F8F8F8; /*背景色*/\n  }\n  table tbody tr:nth-child(n) {\n    background: #FFFFFF; \n  }\n  table tr:hover {\n    background: #EFEFEF; \n}\n  table th {\n    white-space: nowrap; /*表头内容强制在一行显示*/\n  }\n  table td:nth-child(1) {\n    white-space: nowrap; /*表格第一列单元格内容不换行*/\n  }\n</style>\n","source":"_posts/2021-03-10-elementary-function.md","raw":"---\ntitle: 基本初等函数\ndate: 2021-03-10 15:54:36\ncategories:\n- Mathematics\nmathjax: true\n---\n\n**高等数学**将基本初等函数归为五类：幂函数、指数函数、对数函数、三角函数、反三角函数。\n**数学分析**将基本初等函数归为六类：常函数、幂函数、指数函数、对数函数、三角函数、反三角函数。\n接下来将按照**数学分析**的分类，逐一介绍这些函数。\n\n\n\n<!-- more -->\n\n# 基本初等函数\n\n## 常函数\n\n常函数是指不管自变量值如何变化，函数值都不变的函数。\n\n形式为 $f(x)=C$，其中 $C$ 为常数，定义域为$(-\\infty,+\\infty)$。\n\n### 图像\n\n{% asset_img constant-function-example-1.png 300 300 %}\n\n$$f(x)=1$$\n\n\n\n## 幂函数\n\n幂函数是以底数为自变量，幂为因变量，指数为常数的函数。\n\n形式为 $f(x)=x^α$（$a$ 可以是任意实数或者复数）。\n\n### 有理数指数幂\n\n当指数 $a$ 是有理数时，幂函数可以写作如下形式：\n\n$f(x)=x^{k\\frac{m}{n}}(k\\in\\lbrace-1,1,0\\rbrace,m,n\\in{N}^{*})$\n\n|       |  定义域   |  值域   | 奇偶性 | 图像 |\n| :---: | :----: | :----: | :----: | ------ |\n| $k=1,m,n$ 均为奇数 | $R$ | $R$ | 奇函数 | {% asset_img power-function-example-1.png 300 300 %} $$red:f(x)=x^\\frac{1}{3}$$$$blue:f(x)=x^{3}$$ |\n| $k=-1,m,n$ 均为奇数 | $(-\\infty,0)\\cup(0,+\\infty)$ | $(-\\infty,0)\\cup(0,+\\infty)$ | 奇函数 | {% asset_img power-function-example-2.png 300 300 %} $$red:f(x)=x^{-\\frac{1}{3}}$$$$blue:f(x)=x^{-3}$$ |\n| $k=1,m$ 为奇数$,n$ 为偶数 | $[0,+\\infty)$ | $[0,+\\infty)$ | 非奇非偶函数 | {% asset_img power-function-example-3.png 300 300 %} $$red:f(x)=x^{\\frac{3}{2}}$$$$blue:f(x)=x^{\\frac{1}{2}}$$$$green:f(x)=x^{\\frac{5}{2}}$$ |\n| $k=-1,m$ 为奇数$,n$ 为偶数 | $(0,+\\infty)$ | $(0,+\\infty)$ | 非奇非偶函数 | {% asset_img power-function-example-4.png 300 300 %} $$red:f(x)=x^{-\\frac{3}{2}}$$$$blue:f(x)=x^{-\\frac{1}{2}}$$$$green:f(x)=x^{-\\frac{5}{2}}$$ |\n| $k=1,m$ 为偶数$,n$ 为奇数 | $R$ | $[0,+\\infty)$ | 偶函数 | {% asset_img power-function-example-5.png 300 300 %} $$red:f(x)=x^{\\frac{4}{3}}$$$$blue:f(x)=x^{\\frac{2}{3}}$$$$green:f(x)=x^{2}$$ |\n| $k=-1,m$ 为偶数$,n$ 为奇数 | $(-\\infty,0)\\cup(0,+\\infty)$ | $(0,+\\infty)$ | 偶函数 | {% asset_img power-function-example-6.png 300 300 %} $$red:f(x)=x^{-\\frac{4}{3}}$$$$blue:f(x)=x^{-\\frac{2}{3}}$$$$green:f(x)=x^{-2}$$ |\n| $k=0$ | $(-\\infty,0)\\cup(0,+\\infty)$ | $\\lbrace1\\rbrace$ | 偶函数 | {% asset_img power-function-example-7.png 300 300 %} $$red:f(x)=x^{0}$$注意，$f(x)=x^{0}$ 的图像并不是直线，而是直线 $y=1$ 去掉一点 $(0,1)$ |\n\n\n\n## 指数函数\n\n一般地，指数函数的形式为 $f(x)=b^x$（$b$ 为常数且 $b\\in(0,1)\\cup(1,+\\infty)$），函数的定义域为 $R$，值域为 $(0,+\\infty)$。\n\n注意，在指数函数的定义表达式中，在 $b^x$ 前的系数必须为 $1$，自变量 $x$ 必须在指数的位置上，且不能为 $x$ 的其他表达式，否则，就不是指数函数。\n\n### 图像\n|       |  值域   | 图像 |\n| :---: | :----: | ------ |\n| $0<b<1$ | $(0,+\\infty)$ | {% asset_img exponential-function-example-1.png 300 300 %} $$red:f(x)=\\frac{1}{2}^x$$$$blue:f(x)=\\frac{1}{4}^x$$ |\n| $b>1$ | $(0,+\\infty)$ | {% asset_img exponential-function-example-2.png 300 300 %} $$red:f(x)=2^x$$$$blue:f(x)=4^x$$ |\n\n### 性质\n\n#### 性质 1\n\n由指数函数的定义：\n\n​\t$e^x=\\lim_{n \\to \\infty}(1+\\frac{x}{n})^{n}$\n\n可以得出以下定律：\n\n​\t$e^0=1$\n\n​\t$e^1=e$\n\n​\t$e^{x+y}=e^xe^y$\n\n​\t$e^{xy}=(e^x)^y$\n\n​\t$\\frac{e^x}{e^y}=e^{x-y}$\n\n​\t$e^{-x}=e^{0-x}=\\frac{e^0}{e^x}=\\frac{1}{e^x}$\n\n其中 $x\\in{R},y\\in{R}$。\n\n\n\n#### 性质 2\n\n因为在指数函数的定义中 $x$ 是实数，可以使用自然对数 $e$，把更一般的指数函数，即正实数的实数幂函数定义为\n\n$b^x=(e^{\\ln{b}})^x=e^{x\\ln{b}}$\n\n\n\n#### 性质 3\n\n定义于所有的 $b>0$，和所有的实数 $x$。它叫做\"底数为 $b$ 的指数函数\"。从而拓展了通过乘方和方根运算定义的正实数的有理数幂函数：\n\n$b^{\\frac{m}{n}=\\sqrt[n]{b^m}}$\n\n而方根运算可通过自然对数和指数函数来表示：\n\n$\\sqrt[n]{b}=b^{\\frac{1}{n}}=(e^{\\ln{b}})^{\\frac{1}{n}}=e^{\\frac{\\ln{b}}{n}}$\n\n\n\n## 对数函数\n\n对数是幂运算的逆运算。\n\n如果 $b^x=N(b>0,且b\\neq1)$，那么 $x$ 叫做以 $b$ 为底 $N$ 的对数，记作 $x=\\log_{b}{N}$，读作以 $b$ 为底 $N$ 的对数，其中 $b$ 叫做对数的底，$N$ 叫做幂或者真数。\n\n一般地，对数函数的形式为 $f(x)=\\log_{b}{x}(b>0,且b\\neq1)$，函数的定义域为 $(0,+\\infty)$，值域为 $R$ 。\n\n对数函数实际上就是指数函数的反函数，可表示为 $x=b^y$。因此指数函数里对于常数 $b$ 的规定，同样适用于对数函数。\n\n### 图像\n|       |  值域   | 图像 |\n| :---: | :----: | ------ |\n| $0<b<1$ | $R$ | {% asset_img logarithmic-function-example-1.png 300 300 %} $$red:f(x)=\\log_{\\frac{1}{2}}{x}$$$$blue:f(x)=\\log_{\\frac{1}{4}}{x}$$ |\n| $b>1$ | $R$ | {% asset_img logarithmic-function-example-2.png 300 300 %} $$red:f(x)=\\log_{2}{x}$$$$blue:f(x)=\\log_{4}{x}$$ |\n\n### 性质\n\n- 对数函数的函数图像恒定过点$(1,0)$\n\n- 当 $0<b<1$ 时，函数在定义域 $(0,+\\infty)$ 上为单调减函数；$b>1$ 时，函数在定义域 $(0,+\\infty)$ 上为单调增函数\n\n- 对数函数 $f(x)=\\log_{b}{x}(b>0,b\\neq1,x>0)$\n\n  当 $0<b<1,0<x<1$ 时，$f(x)=\\log_{b}{x}>0$\n  \n  当 $b>1, x>1$ 时，$f(x)=\\log_{b}{x}>0$\n  \n  当 $0<b<1, x>1$ 时，$f(x)=\\log_{b}{x}<0$\n  \n  当 $b>1, 0<x<1$ 时，$f(x)=\\log_{b}{x}<0$\n  \n- 底数为 $b$ 的对数函数$f(x)=\\log_{b}{x}与$指数函数 $f(x)=b^x$ 互为反函数，两者的函数图像关于直线 $y = x$ 对称。\n\n{% asset_img logarithmic-function-example-3.png 300 300 %} $$red:f(x)=\\log_{2}{x}$$$$blue:f(x)=2^{x}$$$$green:f(x)=\\log_{\\frac{1}{2}}{x}$$$$blue:f(x)={\\frac{1}{2}}^{x}$$\n\n### 公式\n\n#### 换底公式\n\n$\\log_{b}{x}=\\frac{\\log_{k}{x}}{\\log_{k}{b}}$\n\n##### 证明\n\n由对数函数的定义，可得：\n\n$x=b^{\\log_{b}{x}}$\n\n等式两边同时以 $k$ 为底取对数，可得：\n\n$\\log_{k}{x}=\\log_{k}({b^{\\log_{b}{x}})}$\n\n$\\because b^x=N(b>0,且b\\neq1)$，有 $x=\\log_{b}{N}$。\n\n那么 $(b^x)^t=b^{xt}=N^t\\ (t\\in{R})$，可得：\n\n$xt=\\log_{b}{N^t}=t\\log_{b}{N}\\ (t\\in{R})$\n\n$\\therefore\\log_{k}{x}=\\log_{k}{b^{\\log_{b}{x}}}=\\log_{b}{x}\\log_{k}{b}$\n\n$\\log_{b}{x}=\\frac{\\log_{k}{x}}{\\log_{k}{b}}$ 得证。\n\n\n\n#### 和差\n\n$\\log_{b}{MN}=\\log_{b}{M}+\\log_{b}{N}$\n\n$\\log_{b}{\\frac{M}{N}}=\\log_{b}{M}-\\log_{b}{N}$\n\n##### 证明\n\n设 $M=\\beta^{m},N=\\beta^{n}$\n\n则 $\\log_{b}{MN}=\\log_{b}({\\beta^{m}\\beta^{n}})$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}({\\beta^{m+n}})$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =(m+n)\\log_{b}{\\beta}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =m\\log_{b}{\\beta}+n\\log_{b}{\\beta}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{\\beta^m}+\\log_{b}{\\beta^n}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{M}+\\log_{b}{N}$\n\n$\\log_{b}{\\frac{M}{N}}=\\log_{b}{M}+\\log_{b}{\\frac{1}{N}}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{M}+\\log_{b}{N^{-1}}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{M}-\\log_{b}{N}$\n\n\n\n#### 次方公式\n\n$\\log_{b^N}({x^M})=\\frac{M}{N}\\log_{b}{x}$\n\n##### 证明\n\n由换底公式，可得：\n\n$\\log_{b^N}({x^M})=\\frac{\\ln{b^N}}{\\ln{x^M}}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\frac{N\\ln{b}}{M\\ln{x}}$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\frac{M}{N}\\log_{b}{x}$\n\n##### \n\n#### 还原\n\n$b^{\\log_{b}{x}}=x$\n\n$\\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{b^x}$\n\n\n\n#### 互换\n\n$M^{\\log_{b}{N}} = N^{\\log_{b}{M}}$\n\n##### 证明\n\n设 $\\alpha=\\log_{b}{N},\\  \\beta=\\log_{b}{M}$，则有 $b^\\alpha=N,\\ b^\\beta=M, \\ (b^\\beta)^\\alpha=(b^\\alpha)^\\beta$，\n\n$\\therefore M^{\\log_{b}{N}} = N^{\\log_{b}{M}}$\n\n\n\n#### 倒数\n\n$\\log_{b}{\\theta}=\\frac{\\ln \\theta}{\\ln b}=\\frac{1}{\\frac{\\ln b}{\\ln \\theta}}=\\frac{1}{\\log_{\\theta}{b}}$\n\n\n\n## 三角函数\n\n<!--TODO-->\n\n\n\n## 反三角函数\n\n<!--TODO-->\n\n\n\n# 初等函数\n\n初等函数是由**基本初等函数**经过有限次的有理运算（加、减、乘、除、有理数次乘方、有理数次开方）及有限次函数复合所产生、并且在定义域上能用一个解析式表示的函数。\n\n基本初等函数和初等函数在其定义区间内均为**连续函数**。\n\n一般来说，分段函数不是初等函数，因为在这些分段函数的定义域上不能用一个解析式表示。\n\n\n\n\n> 参考：\n>\n> https://baike.baidu.com/item/%E5%9F%BA%E6%9C%AC%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0\n>\n> https://zh.wikipedia.org/wiki/%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0\n\n\n<style>\n  table {\n    width: 1100px; /*表格宽度*/\n    max-width: 1100px; /*表格最大宽度，避免表格过宽*/\n    border: 1px solid #dedede; /*表格外边框设置*/\n    margin: 1px auto; /*外边距*/\n    border-collapse: collapse; /*使用单一线条的边框*/\n    empty-cells: show; /*单元格无内容依旧绘制边框*/\n  }\n  table th,\n  table td {\n    height: 35px; /*统一每一行的默认高度*/\n    border: 1px solid #dedede; /*内部边框样式*/\n    padding: 0 10px; /*内边距*/\n  }\n  table th {\n    font-weight: bold; /*加粗*/\n    text-align: center !important; /*内容居中，加上 !important 避免被 Markdown 样式覆盖*/\n    background: #F8F8F8; /*背景色*/\n  }\n  table tbody tr:nth-child(n) {\n    background: #FFFFFF; \n  }\n  table tr:hover {\n    background: #EFEFEF; \n}\n  table th {\n    white-space: nowrap; /*表头内容强制在一行显示*/\n  }\n  table td:nth-child(1) {\n    white-space: nowrap; /*表格第一列单元格内容不换行*/\n  }\n</style>\n","slug":"elementary-function","published":1,"updated":"2021-03-19T02:59:08.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqajiie0008osprb5kc17rb","content":"<p><strong>高等数学</strong>将基本初等函数归为五类：幂函数、指数函数、对数函数、三角函数、反三角函数。<br><strong>数学分析</strong>将基本初等函数归为六类：常函数、幂函数、指数函数、对数函数、三角函数、反三角函数。<br>接下来将按照<strong>数学分析</strong>的分类，逐一介绍这些函数。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"基本初等函数\">1 基本初等函数</h1><h2 id=\"常函数\">1.1 常函数</h2><p>常函数是指不管自变量值如何变化，函数值都不变的函数。</p>\n<p>形式为 $f(x)=C$，其中 $C$ 为常数，定义域为$(-\\infty,+\\infty)$。</p>\n<h3 id=\"图像\">1.1.1 图像</h3><img src=\"/2021/03/10/elementary-function/constant-function-example-1.png\" class width=\"300\" height=\"300\">\n\n<p>$$f(x)=1$$</p>\n<h2 id=\"幂函数\">1.2 幂函数</h2><p>幂函数是以底数为自变量，幂为因变量，指数为常数的函数。</p>\n<p>形式为 $f(x)=x^α$（$a$ 可以是任意实数或者复数）。</p>\n<h3 id=\"有理数指数幂\">1.2.1 有理数指数幂</h3><p>当指数 $a$ 是有理数时，幂函数可以写作如下形式：</p>\n<p>$f(x)=x^{k\\frac{m}{n}}(k\\in\\lbrace-1,1,0\\rbrace,m,n\\in{N}^{*})$</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">定义域</th>\n<th align=\"center\">值域</th>\n<th align=\"center\">奇偶性</th>\n<th>图像</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$k=1,m,n$ 均为奇数</td>\n<td align=\"center\">$R$</td>\n<td align=\"center\">$R$</td>\n<td align=\"center\">奇函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-1.png\" class width=\"300\" height=\"300\"> $$red:f(x)=x^\\frac{1}{3}$$$$blue:f(x)=x^{3}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$k=-1,m,n$ 均为奇数</td>\n<td align=\"center\">$(-\\infty,0)\\cup(0,+\\infty)$</td>\n<td align=\"center\">$(-\\infty,0)\\cup(0,+\\infty)$</td>\n<td align=\"center\">奇函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-2.png\" class width=\"300\" height=\"300\"> $$red:f(x)=x^{-\\frac{1}{3}}$$$$blue:f(x)=x^{-3}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$k=1,m$ 为奇数$,n$ 为偶数</td>\n<td align=\"center\">$[0,+\\infty)$</td>\n<td align=\"center\">$[0,+\\infty)$</td>\n<td align=\"center\">非奇非偶函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-3.png\" class width=\"300\" height=\"300\"> $$red:f(x)=x^{\\frac{3}{2}}$$$$blue:f(x)=x^{\\frac{1}{2}}$$$$green:f(x)=x^{\\frac{5}{2}}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$k=-1,m$ 为奇数$,n$ 为偶数</td>\n<td align=\"center\">$(0,+\\infty)$</td>\n<td align=\"center\">$(0,+\\infty)$</td>\n<td align=\"center\">非奇非偶函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-4.png\" class width=\"300\" height=\"300\"> $$red:f(x)=x^{-\\frac{3}{2}}$$$$blue:f(x)=x^{-\\frac{1}{2}}$$$$green:f(x)=x^{-\\frac{5}{2}}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$k=1,m$ 为偶数$,n$ 为奇数</td>\n<td align=\"center\">$R$</td>\n<td align=\"center\">$[0,+\\infty)$</td>\n<td align=\"center\">偶函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-5.png\" class width=\"300\" height=\"300\"> $$red:f(x)=x^{\\frac{4}{3}}$$$$blue:f(x)=x^{\\frac{2}{3}}$$$$green:f(x)=x^{2}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$k=-1,m$ 为偶数$,n$ 为奇数</td>\n<td align=\"center\">$(-\\infty,0)\\cup(0,+\\infty)$</td>\n<td align=\"center\">$(0,+\\infty)$</td>\n<td align=\"center\">偶函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-6.png\" class width=\"300\" height=\"300\"> $$red:f(x)=x^{-\\frac{4}{3}}$$$$blue:f(x)=x^{-\\frac{2}{3}}$$$$green:f(x)=x^{-2}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$k=0$</td>\n<td align=\"center\">$(-\\infty,0)\\cup(0,+\\infty)$</td>\n<td align=\"center\">$\\lbrace1\\rbrace$</td>\n<td align=\"center\">偶函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-7.png\" class width=\"300\" height=\"300\"> $$red:f(x)=x^{0}$$注意，$f(x)=x^{0}$ 的图像并不是直线，而是直线 $y=1$ 去掉一点 $(0,1)$</td>\n</tr>\n</tbody></table>\n<h2 id=\"指数函数\">1.3 指数函数</h2><p>一般地，指数函数的形式为 $f(x)=b^x$（$b$ 为常数且 $b\\in(0,1)\\cup(1,+\\infty)$），函数的定义域为 $R$，值域为 $(0,+\\infty)$。</p>\n<p>注意，在指数函数的定义表达式中，在 $b^x$ 前的系数必须为 $1$，自变量 $x$ 必须在指数的位置上，且不能为 $x$ 的其他表达式，否则，就不是指数函数。</p>\n<h3 id=\"图像-1\">1.3.1 图像</h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">值域</th>\n<th>图像</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$0&lt;b&lt;1$</td>\n<td align=\"center\">$(0,+\\infty)$</td>\n<td><img src=\"/2021/03/10/elementary-function/exponential-function-example-1.png\" class width=\"300\" height=\"300\"> $$red:f(x)=\\frac{1}{2}^x$$$$blue:f(x)=\\frac{1}{4}^x$$</td>\n</tr>\n<tr>\n<td align=\"center\">$b&gt;1$</td>\n<td align=\"center\">$(0,+\\infty)$</td>\n<td><img src=\"/2021/03/10/elementary-function/exponential-function-example-2.png\" class width=\"300\" height=\"300\"> $$red:f(x)=2^x$$$$blue:f(x)=4^x$$</td>\n</tr>\n</tbody></table>\n<h3 id=\"性质\">1.3.2 性质</h3><h4 id=\"性质-1\">1.3.2.1 性质 1</h4><p>由指数函数的定义：</p>\n<p>​    $e^x=\\lim_{n \\to \\infty}(1+\\frac{x}{n})^{n}$</p>\n<p>可以得出以下定律：</p>\n<p>​    $e^0=1$</p>\n<p>​    $e^1=e$</p>\n<p>​    $e^{x+y}=e^xe^y$</p>\n<p>​    $e^{xy}=(e^x)^y$</p>\n<p>​    $\\frac{e^x}{e^y}=e^{x-y}$</p>\n<p>​    $e^{-x}=e^{0-x}=\\frac{e^0}{e^x}=\\frac{1}{e^x}$</p>\n<p>其中 $x\\in{R},y\\in{R}$。</p>\n<h4 id=\"性质-2\">1.3.2.2 性质 2</h4><p>因为在指数函数的定义中 $x$ 是实数，可以使用自然对数 $e$，把更一般的指数函数，即正实数的实数幂函数定义为</p>\n<p>$b^x=(e^{\\ln{b}})^x=e^{x\\ln{b}}$</p>\n<h4 id=\"性质-3\">1.3.2.3 性质 3</h4><p>定义于所有的 $b&gt;0$，和所有的实数 $x$。它叫做”底数为 $b$ 的指数函数”。从而拓展了通过乘方和方根运算定义的正实数的有理数幂函数：</p>\n<p>$b^{\\frac{m}{n}=\\sqrt[n]{b^m}}$</p>\n<p>而方根运算可通过自然对数和指数函数来表示：</p>\n<p>$\\sqrt[n]{b}=b^{\\frac{1}{n}}=(e^{\\ln{b}})^{\\frac{1}{n}}=e^{\\frac{\\ln{b}}{n}}$</p>\n<h2 id=\"对数函数\">1.4 对数函数</h2><p>对数是幂运算的逆运算。</p>\n<p>如果 $b^x=N(b&gt;0,且b\\neq1)$，那么 $x$ 叫做以 $b$ 为底 $N$ 的对数，记作 $x=\\log_{b}{N}$，读作以 $b$ 为底 $N$ 的对数，其中 $b$ 叫做对数的底，$N$ 叫做幂或者真数。</p>\n<p>一般地，对数函数的形式为 $f(x)=\\log_{b}{x}(b&gt;0,且b\\neq1)$，函数的定义域为 $(0,+\\infty)$，值域为 $R$ 。</p>\n<p>对数函数实际上就是指数函数的反函数，可表示为 $x=b^y$。因此指数函数里对于常数 $b$ 的规定，同样适用于对数函数。</p>\n<h3 id=\"图像-2\">1.4.1 图像</h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">值域</th>\n<th>图像</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$0&lt;b&lt;1$</td>\n<td align=\"center\">$R$</td>\n<td><img src=\"/2021/03/10/elementary-function/logarithmic-function-example-1.png\" class width=\"300\" height=\"300\"> $$red:f(x)=\\log_{\\frac{1}{2}}{x}$$$$blue:f(x)=\\log_{\\frac{1}{4}}{x}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$b&gt;1$</td>\n<td align=\"center\">$R$</td>\n<td><img src=\"/2021/03/10/elementary-function/logarithmic-function-example-2.png\" class width=\"300\" height=\"300\"> $$red:f(x)=\\log_{2}{x}$$$$blue:f(x)=\\log_{4}{x}$$</td>\n</tr>\n</tbody></table>\n<h3 id=\"性质-1\">1.4.2 性质</h3><ul>\n<li><p>对数函数的函数图像恒定过点$(1,0)$</p>\n</li>\n<li><p>当 $0&lt;b&lt;1$ 时，函数在定义域 $(0,+\\infty)$ 上为单调减函数；$b&gt;1$ 时，函数在定义域 $(0,+\\infty)$ 上为单调增函数</p>\n</li>\n<li><p>对数函数 $f(x)=\\log_{b}{x}(b&gt;0,b\\neq1,x&gt;0)$</p>\n<p>当 $0&lt;b&lt;1,0&lt;x&lt;1$ 时，$f(x)=\\log_{b}{x}&gt;0$</p>\n<p>当 $b&gt;1, x&gt;1$ 时，$f(x)=\\log_{b}{x}&gt;0$</p>\n<p>当 $0&lt;b&lt;1, x&gt;1$ 时，$f(x)=\\log_{b}{x}&lt;0$</p>\n<p>当 $b&gt;1, 0&lt;x&lt;1$ 时，$f(x)=\\log_{b}{x}&lt;0$</p>\n</li>\n<li><p>底数为 $b$ 的对数函数$f(x)=\\log_{b}{x}与$指数函数 $f(x)=b^x$ 互为反函数，两者的函数图像关于直线 $y = x$ 对称。</p>\n</li>\n</ul>\n<img src=\"/2021/03/10/elementary-function/logarithmic-function-example-3.png\" class width=\"300\" height=\"300\"> $$red:f(x)=\\log_{2}{x}$$$$blue:f(x)=2^{x}$$$$green:f(x)=\\log_{\\frac{1}{2}}{x}$$$$blue:f(x)={\\frac{1}{2}}^{x}$$\n\n<h3 id=\"公式\">1.4.3 公式</h3><h4 id=\"换底公式\">1.4.3.1 换底公式</h4><p>$\\log_{b}{x}=\\frac{\\log_{k}{x}}{\\log_{k}{b}}$</p>\n<h5 id=\"证明\">1.4.3.1.1 证明</h5><p>由对数函数的定义，可得：</p>\n<p>$x=b^{\\log_{b}{x}}$</p>\n<p>等式两边同时以 $k$ 为底取对数，可得：</p>\n<p>$\\log_{k}{x}=\\log_{k}({b^{\\log_{b}{x}})}$</p>\n<p>$\\because b^x=N(b&gt;0,且b\\neq1)$，有 $x=\\log_{b}{N}$。</p>\n<p>那么 $(b^x)^t=b^{xt}=N^t\\ (t\\in{R})$，可得：</p>\n<p>$xt=\\log_{b}{N^t}=t\\log_{b}{N}\\ (t\\in{R})$</p>\n<p>$\\therefore\\log_{k}{x}=\\log_{k}{b^{\\log_{b}{x}}}=\\log_{b}{x}\\log_{k}{b}$</p>\n<p>$\\log_{b}{x}=\\frac{\\log_{k}{x}}{\\log_{k}{b}}$ 得证。</p>\n<h4 id=\"和差\">1.4.3.2 和差</h4><p>$\\log_{b}{MN}=\\log_{b}{M}+\\log_{b}{N}$</p>\n<p>$\\log_{b}{\\frac{M}{N}}=\\log_{b}{M}-\\log_{b}{N}$</p>\n<h5 id=\"证明-1\">1.4.3.2.1 证明</h5><p>设 $M=\\beta^{m},N=\\beta^{n}$</p>\n<p>则 $\\log_{b}{MN}=\\log_{b}({\\beta^{m}\\beta^{n}})$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}({\\beta^{m+n}})$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =(m+n)\\log_{b}{\\beta}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =m\\log_{b}{\\beta}+n\\log_{b}{\\beta}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{\\beta^m}+\\log_{b}{\\beta^n}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{M}+\\log_{b}{N}$</p>\n<p>$\\log_{b}{\\frac{M}{N}}=\\log_{b}{M}+\\log_{b}{\\frac{1}{N}}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{M}+\\log_{b}{N^{-1}}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{M}-\\log_{b}{N}$</p>\n<h4 id=\"次方公式\">1.4.3.3 次方公式</h4><p>$\\log_{b^N}({x^M})=\\frac{M}{N}\\log_{b}{x}$</p>\n<h5 id=\"证明-2\">1.4.3.3.1 证明</h5><p>由换底公式，可得：</p>\n<p>$\\log_{b^N}({x^M})=\\frac{\\ln{b^N}}{\\ln{x^M}}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\frac{N\\ln{b}}{M\\ln{x}}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\frac{M}{N}\\log_{b}{x}$</p>\n<h5 id>1.4.3.3.2 </h5><h4 id=\"还原\">1.4.3.4 还原</h4><p>$b^{\\log_{b}{x}}=x$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{b^x}$</p>\n<h4 id=\"互换\">1.4.3.5 互换</h4><p>$M^{\\log_{b}{N}} = N^{\\log_{b}{M}}$</p>\n<h5 id=\"证明-3\">1.4.3.5.1 证明</h5><p>设 $\\alpha=\\log_{b}{N},\\  \\beta=\\log_{b}{M}$，则有 $b^\\alpha=N,\\ b^\\beta=M, \\ (b^\\beta)^\\alpha=(b^\\alpha)^\\beta$，</p>\n<p>$\\therefore M^{\\log_{b}{N}} = N^{\\log_{b}{M}}$</p>\n<h4 id=\"倒数\">1.4.3.6 倒数</h4><p>$\\log_{b}{\\theta}=\\frac{\\ln \\theta}{\\ln b}=\\frac{1}{\\frac{\\ln b}{\\ln \\theta}}=\\frac{1}{\\log_{\\theta}{b}}$</p>\n<h2 id=\"三角函数\">1.5 三角函数</h2><!--TODO-->\n\n\n\n<h2 id=\"反三角函数\">1.6 反三角函数</h2><!--TODO-->\n\n\n\n<h1 id=\"初等函数\">2 初等函数</h1><p>初等函数是由<strong>基本初等函数</strong>经过有限次的有理运算（加、减、乘、除、有理数次乘方、有理数次开方）及有限次函数复合所产生、并且在定义域上能用一个解析式表示的函数。</p>\n<p>基本初等函数和初等函数在其定义区间内均为<strong>连续函数</strong>。</p>\n<p>一般来说，分段函数不是初等函数，因为在这些分段函数的定义域上不能用一个解析式表示。</p>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://baike.baidu.com/item/%E5%9F%BA%E6%9C%AC%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0\">https://baike.baidu.com/item/%E5%9F%BA%E6%9C%AC%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0\">https://zh.wikipedia.org/wiki/%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0</a></p>\n</blockquote>\n<style>\n  table {\n    width: 1100px; /*表格宽度*/\n    max-width: 1100px; /*表格最大宽度，避免表格过宽*/\n    border: 1px solid #dedede; /*表格外边框设置*/\n    margin: 1px auto; /*外边距*/\n    border-collapse: collapse; /*使用单一线条的边框*/\n    empty-cells: show; /*单元格无内容依旧绘制边框*/\n  }\n  table th,\n  table td {\n    height: 35px; /*统一每一行的默认高度*/\n    border: 1px solid #dedede; /*内部边框样式*/\n    padding: 0 10px; /*内边距*/\n  }\n  table th {\n    font-weight: bold; /*加粗*/\n    text-align: center !important; /*内容居中，加上 !important 避免被 Markdown 样式覆盖*/\n    background: #F8F8F8; /*背景色*/\n  }\n  table tbody tr:nth-child(n) {\n    background: #FFFFFF; \n  }\n  table tr:hover {\n    background: #EFEFEF; \n}\n  table th {\n    white-space: nowrap; /*表头内容强制在一行显示*/\n  }\n  table td:nth-child(1) {\n    white-space: nowrap; /*表格第一列单元格内容不换行*/\n  }\n</style>\n","site":{"data":{}},"excerpt":"<p><strong>高等数学</strong>将基本初等函数归为五类：幂函数、指数函数、对数函数、三角函数、反三角函数。<br><strong>数学分析</strong>将基本初等函数归为六类：常函数、幂函数、指数函数、对数函数、三角函数、反三角函数。<br>接下来将按照<strong>数学分析</strong>的分类，逐一介绍这些函数。</p>","more":"<h1 id=\"基本初等函数\"><a href=\"#基本初等函数\" class=\"headerlink\" title=\"基本初等函数\"></a>基本初等函数</h1><h2 id=\"常函数\"><a href=\"#常函数\" class=\"headerlink\" title=\"常函数\"></a>常函数</h2><p>常函数是指不管自变量值如何变化，函数值都不变的函数。</p>\n<p>形式为 $f(x)=C$，其中 $C$ 为常数，定义域为$(-\\infty,+\\infty)$。</p>\n<h3 id=\"图像\"><a href=\"#图像\" class=\"headerlink\" title=\"图像\"></a>图像</h3><img src=\"/2021/03/10/elementary-function/constant-function-example-1.png\" class=\"\" width=\"300\" height=\"300\">\n\n<p>$$f(x)=1$$</p>\n<h2 id=\"幂函数\"><a href=\"#幂函数\" class=\"headerlink\" title=\"幂函数\"></a>幂函数</h2><p>幂函数是以底数为自变量，幂为因变量，指数为常数的函数。</p>\n<p>形式为 $f(x)=x^α$（$a$ 可以是任意实数或者复数）。</p>\n<h3 id=\"有理数指数幂\"><a href=\"#有理数指数幂\" class=\"headerlink\" title=\"有理数指数幂\"></a>有理数指数幂</h3><p>当指数 $a$ 是有理数时，幂函数可以写作如下形式：</p>\n<p>$f(x)=x^{k\\frac{m}{n}}(k\\in\\lbrace-1,1,0\\rbrace,m,n\\in{N}^{*})$</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">定义域</th>\n<th align=\"center\">值域</th>\n<th align=\"center\">奇偶性</th>\n<th>图像</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$k=1,m,n$ 均为奇数</td>\n<td align=\"center\">$R$</td>\n<td align=\"center\">$R$</td>\n<td align=\"center\">奇函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-1.png\" class=\"\" width=\"300\" height=\"300\"> $$red:f(x)=x^\\frac{1}{3}$$$$blue:f(x)=x^{3}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$k=-1,m,n$ 均为奇数</td>\n<td align=\"center\">$(-\\infty,0)\\cup(0,+\\infty)$</td>\n<td align=\"center\">$(-\\infty,0)\\cup(0,+\\infty)$</td>\n<td align=\"center\">奇函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-2.png\" class=\"\" width=\"300\" height=\"300\"> $$red:f(x)=x^{-\\frac{1}{3}}$$$$blue:f(x)=x^{-3}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$k=1,m$ 为奇数$,n$ 为偶数</td>\n<td align=\"center\">$[0,+\\infty)$</td>\n<td align=\"center\">$[0,+\\infty)$</td>\n<td align=\"center\">非奇非偶函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-3.png\" class=\"\" width=\"300\" height=\"300\"> $$red:f(x)=x^{\\frac{3}{2}}$$$$blue:f(x)=x^{\\frac{1}{2}}$$$$green:f(x)=x^{\\frac{5}{2}}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$k=-1,m$ 为奇数$,n$ 为偶数</td>\n<td align=\"center\">$(0,+\\infty)$</td>\n<td align=\"center\">$(0,+\\infty)$</td>\n<td align=\"center\">非奇非偶函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-4.png\" class=\"\" width=\"300\" height=\"300\"> $$red:f(x)=x^{-\\frac{3}{2}}$$$$blue:f(x)=x^{-\\frac{1}{2}}$$$$green:f(x)=x^{-\\frac{5}{2}}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$k=1,m$ 为偶数$,n$ 为奇数</td>\n<td align=\"center\">$R$</td>\n<td align=\"center\">$[0,+\\infty)$</td>\n<td align=\"center\">偶函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-5.png\" class=\"\" width=\"300\" height=\"300\"> $$red:f(x)=x^{\\frac{4}{3}}$$$$blue:f(x)=x^{\\frac{2}{3}}$$$$green:f(x)=x^{2}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$k=-1,m$ 为偶数$,n$ 为奇数</td>\n<td align=\"center\">$(-\\infty,0)\\cup(0,+\\infty)$</td>\n<td align=\"center\">$(0,+\\infty)$</td>\n<td align=\"center\">偶函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-6.png\" class=\"\" width=\"300\" height=\"300\"> $$red:f(x)=x^{-\\frac{4}{3}}$$$$blue:f(x)=x^{-\\frac{2}{3}}$$$$green:f(x)=x^{-2}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$k=0$</td>\n<td align=\"center\">$(-\\infty,0)\\cup(0,+\\infty)$</td>\n<td align=\"center\">$\\lbrace1\\rbrace$</td>\n<td align=\"center\">偶函数</td>\n<td><img src=\"/2021/03/10/elementary-function/power-function-example-7.png\" class=\"\" width=\"300\" height=\"300\"> $$red:f(x)=x^{0}$$注意，$f(x)=x^{0}$ 的图像并不是直线，而是直线 $y=1$ 去掉一点 $(0,1)$</td>\n</tr>\n</tbody></table>\n<h2 id=\"指数函数\"><a href=\"#指数函数\" class=\"headerlink\" title=\"指数函数\"></a>指数函数</h2><p>一般地，指数函数的形式为 $f(x)=b^x$（$b$ 为常数且 $b\\in(0,1)\\cup(1,+\\infty)$），函数的定义域为 $R$，值域为 $(0,+\\infty)$。</p>\n<p>注意，在指数函数的定义表达式中，在 $b^x$ 前的系数必须为 $1$，自变量 $x$ 必须在指数的位置上，且不能为 $x$ 的其他表达式，否则，就不是指数函数。</p>\n<h3 id=\"图像-1\"><a href=\"#图像-1\" class=\"headerlink\" title=\"图像\"></a>图像</h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">值域</th>\n<th>图像</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$0&lt;b&lt;1$</td>\n<td align=\"center\">$(0,+\\infty)$</td>\n<td><img src=\"/2021/03/10/elementary-function/exponential-function-example-1.png\" class=\"\" width=\"300\" height=\"300\"> $$red:f(x)=\\frac{1}{2}^x$$$$blue:f(x)=\\frac{1}{4}^x$$</td>\n</tr>\n<tr>\n<td align=\"center\">$b&gt;1$</td>\n<td align=\"center\">$(0,+\\infty)$</td>\n<td><img src=\"/2021/03/10/elementary-function/exponential-function-example-2.png\" class=\"\" width=\"300\" height=\"300\"> $$red:f(x)=2^x$$$$blue:f(x)=4^x$$</td>\n</tr>\n</tbody></table>\n<h3 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h3><h4 id=\"性质-1\"><a href=\"#性质-1\" class=\"headerlink\" title=\"性质 1\"></a>性质 1</h4><p>由指数函数的定义：</p>\n<p>​    $e^x=\\lim_{n \\to \\infty}(1+\\frac{x}{n})^{n}$</p>\n<p>可以得出以下定律：</p>\n<p>​    $e^0=1$</p>\n<p>​    $e^1=e$</p>\n<p>​    $e^{x+y}=e^xe^y$</p>\n<p>​    $e^{xy}=(e^x)^y$</p>\n<p>​    $\\frac{e^x}{e^y}=e^{x-y}$</p>\n<p>​    $e^{-x}=e^{0-x}=\\frac{e^0}{e^x}=\\frac{1}{e^x}$</p>\n<p>其中 $x\\in{R},y\\in{R}$。</p>\n<h4 id=\"性质-2\"><a href=\"#性质-2\" class=\"headerlink\" title=\"性质 2\"></a>性质 2</h4><p>因为在指数函数的定义中 $x$ 是实数，可以使用自然对数 $e$，把更一般的指数函数，即正实数的实数幂函数定义为</p>\n<p>$b^x=(e^{\\ln{b}})^x=e^{x\\ln{b}}$</p>\n<h4 id=\"性质-3\"><a href=\"#性质-3\" class=\"headerlink\" title=\"性质 3\"></a>性质 3</h4><p>定义于所有的 $b&gt;0$，和所有的实数 $x$。它叫做”底数为 $b$ 的指数函数”。从而拓展了通过乘方和方根运算定义的正实数的有理数幂函数：</p>\n<p>$b^{\\frac{m}{n}=\\sqrt[n]{b^m}}$</p>\n<p>而方根运算可通过自然对数和指数函数来表示：</p>\n<p>$\\sqrt[n]{b}=b^{\\frac{1}{n}}=(e^{\\ln{b}})^{\\frac{1}{n}}=e^{\\frac{\\ln{b}}{n}}$</p>\n<h2 id=\"对数函数\"><a href=\"#对数函数\" class=\"headerlink\" title=\"对数函数\"></a>对数函数</h2><p>对数是幂运算的逆运算。</p>\n<p>如果 $b^x=N(b&gt;0,且b\\neq1)$，那么 $x$ 叫做以 $b$ 为底 $N$ 的对数，记作 $x=\\log_{b}{N}$，读作以 $b$ 为底 $N$ 的对数，其中 $b$ 叫做对数的底，$N$ 叫做幂或者真数。</p>\n<p>一般地，对数函数的形式为 $f(x)=\\log_{b}{x}(b&gt;0,且b\\neq1)$，函数的定义域为 $(0,+\\infty)$，值域为 $R$ 。</p>\n<p>对数函数实际上就是指数函数的反函数，可表示为 $x=b^y$。因此指数函数里对于常数 $b$ 的规定，同样适用于对数函数。</p>\n<h3 id=\"图像-2\"><a href=\"#图像-2\" class=\"headerlink\" title=\"图像\"></a>图像</h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">值域</th>\n<th>图像</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$0&lt;b&lt;1$</td>\n<td align=\"center\">$R$</td>\n<td><img src=\"/2021/03/10/elementary-function/logarithmic-function-example-1.png\" class=\"\" width=\"300\" height=\"300\"> $$red:f(x)=\\log_{\\frac{1}{2}}{x}$$$$blue:f(x)=\\log_{\\frac{1}{4}}{x}$$</td>\n</tr>\n<tr>\n<td align=\"center\">$b&gt;1$</td>\n<td align=\"center\">$R$</td>\n<td><img src=\"/2021/03/10/elementary-function/logarithmic-function-example-2.png\" class=\"\" width=\"300\" height=\"300\"> $$red:f(x)=\\log_{2}{x}$$$$blue:f(x)=\\log_{4}{x}$$</td>\n</tr>\n</tbody></table>\n<h3 id=\"性质-1\"><a href=\"#性质-1\" class=\"headerlink\" title=\"性质\"></a>性质</h3><ul>\n<li><p>对数函数的函数图像恒定过点$(1,0)$</p>\n</li>\n<li><p>当 $0&lt;b&lt;1$ 时，函数在定义域 $(0,+\\infty)$ 上为单调减函数；$b&gt;1$ 时，函数在定义域 $(0,+\\infty)$ 上为单调增函数</p>\n</li>\n<li><p>对数函数 $f(x)=\\log_{b}{x}(b&gt;0,b\\neq1,x&gt;0)$</p>\n<p>当 $0&lt;b&lt;1,0&lt;x&lt;1$ 时，$f(x)=\\log_{b}{x}&gt;0$</p>\n<p>当 $b&gt;1, x&gt;1$ 时，$f(x)=\\log_{b}{x}&gt;0$</p>\n<p>当 $0&lt;b&lt;1, x&gt;1$ 时，$f(x)=\\log_{b}{x}&lt;0$</p>\n<p>当 $b&gt;1, 0&lt;x&lt;1$ 时，$f(x)=\\log_{b}{x}&lt;0$</p>\n</li>\n<li><p>底数为 $b$ 的对数函数$f(x)=\\log_{b}{x}与$指数函数 $f(x)=b^x$ 互为反函数，两者的函数图像关于直线 $y = x$ 对称。</p>\n</li>\n</ul>\n<img src=\"/2021/03/10/elementary-function/logarithmic-function-example-3.png\" class=\"\" width=\"300\" height=\"300\"> $$red:f(x)=\\log_{2}{x}$$$$blue:f(x)=2^{x}$$$$green:f(x)=\\log_{\\frac{1}{2}}{x}$$$$blue:f(x)={\\frac{1}{2}}^{x}$$\n\n<h3 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h3><h4 id=\"换底公式\"><a href=\"#换底公式\" class=\"headerlink\" title=\"换底公式\"></a>换底公式</h4><p>$\\log_{b}{x}=\\frac{\\log_{k}{x}}{\\log_{k}{b}}$</p>\n<h5 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h5><p>由对数函数的定义，可得：</p>\n<p>$x=b^{\\log_{b}{x}}$</p>\n<p>等式两边同时以 $k$ 为底取对数，可得：</p>\n<p>$\\log_{k}{x}=\\log_{k}({b^{\\log_{b}{x}})}$</p>\n<p>$\\because b^x=N(b&gt;0,且b\\neq1)$，有 $x=\\log_{b}{N}$。</p>\n<p>那么 $(b^x)^t=b^{xt}=N^t\\ (t\\in{R})$，可得：</p>\n<p>$xt=\\log_{b}{N^t}=t\\log_{b}{N}\\ (t\\in{R})$</p>\n<p>$\\therefore\\log_{k}{x}=\\log_{k}{b^{\\log_{b}{x}}}=\\log_{b}{x}\\log_{k}{b}$</p>\n<p>$\\log_{b}{x}=\\frac{\\log_{k}{x}}{\\log_{k}{b}}$ 得证。</p>\n<h4 id=\"和差\"><a href=\"#和差\" class=\"headerlink\" title=\"和差\"></a>和差</h4><p>$\\log_{b}{MN}=\\log_{b}{M}+\\log_{b}{N}$</p>\n<p>$\\log_{b}{\\frac{M}{N}}=\\log_{b}{M}-\\log_{b}{N}$</p>\n<h5 id=\"证明-1\"><a href=\"#证明-1\" class=\"headerlink\" title=\"证明\"></a>证明</h5><p>设 $M=\\beta^{m},N=\\beta^{n}$</p>\n<p>则 $\\log_{b}{MN}=\\log_{b}({\\beta^{m}\\beta^{n}})$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}({\\beta^{m+n}})$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =(m+n)\\log_{b}{\\beta}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =m\\log_{b}{\\beta}+n\\log_{b}{\\beta}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{\\beta^m}+\\log_{b}{\\beta^n}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{M}+\\log_{b}{N}$</p>\n<p>$\\log_{b}{\\frac{M}{N}}=\\log_{b}{M}+\\log_{b}{\\frac{1}{N}}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{M}+\\log_{b}{N^{-1}}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{M}-\\log_{b}{N}$</p>\n<h4 id=\"次方公式\"><a href=\"#次方公式\" class=\"headerlink\" title=\"次方公式\"></a>次方公式</h4><p>$\\log_{b^N}({x^M})=\\frac{M}{N}\\log_{b}{x}$</p>\n<h5 id=\"证明-2\"><a href=\"#证明-2\" class=\"headerlink\" title=\"证明\"></a>证明</h5><p>由换底公式，可得：</p>\n<p>$\\log_{b^N}({x^M})=\\frac{\\ln{b^N}}{\\ln{x^M}}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\frac{N\\ln{b}}{M\\ln{x}}$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ =\\frac{M}{N}\\log_{b}{x}$</p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h5><h4 id=\"还原\"><a href=\"#还原\" class=\"headerlink\" title=\"还原\"></a>还原</h4><p>$b^{\\log_{b}{x}}=x$</p>\n<p>$\\ \\ \\ \\ \\ \\ \\ \\ =\\log_{b}{b^x}$</p>\n<h4 id=\"互换\"><a href=\"#互换\" class=\"headerlink\" title=\"互换\"></a>互换</h4><p>$M^{\\log_{b}{N}} = N^{\\log_{b}{M}}$</p>\n<h5 id=\"证明-3\"><a href=\"#证明-3\" class=\"headerlink\" title=\"证明\"></a>证明</h5><p>设 $\\alpha=\\log_{b}{N},\\  \\beta=\\log_{b}{M}$，则有 $b^\\alpha=N,\\ b^\\beta=M, \\ (b^\\beta)^\\alpha=(b^\\alpha)^\\beta$，</p>\n<p>$\\therefore M^{\\log_{b}{N}} = N^{\\log_{b}{M}}$</p>\n<h4 id=\"倒数\"><a href=\"#倒数\" class=\"headerlink\" title=\"倒数\"></a>倒数</h4><p>$\\log_{b}{\\theta}=\\frac{\\ln \\theta}{\\ln b}=\\frac{1}{\\frac{\\ln b}{\\ln \\theta}}=\\frac{1}{\\log_{\\theta}{b}}$</p>\n<h2 id=\"三角函数\"><a href=\"#三角函数\" class=\"headerlink\" title=\"三角函数\"></a>三角函数</h2><!--TODO-->\n\n\n\n<h2 id=\"反三角函数\"><a href=\"#反三角函数\" class=\"headerlink\" title=\"反三角函数\"></a>反三角函数</h2><!--TODO-->\n\n\n\n<h1 id=\"初等函数\"><a href=\"#初等函数\" class=\"headerlink\" title=\"初等函数\"></a>初等函数</h1><p>初等函数是由<strong>基本初等函数</strong>经过有限次的有理运算（加、减、乘、除、有理数次乘方、有理数次开方）及有限次函数复合所产生、并且在定义域上能用一个解析式表示的函数。</p>\n<p>基本初等函数和初等函数在其定义区间内均为<strong>连续函数</strong>。</p>\n<p>一般来说，分段函数不是初等函数，因为在这些分段函数的定义域上不能用一个解析式表示。</p>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://baike.baidu.com/item/%E5%9F%BA%E6%9C%AC%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0\">https://baike.baidu.com/item/%E5%9F%BA%E6%9C%AC%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0\">https://zh.wikipedia.org/wiki/%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0</a></p>\n</blockquote>\n<style>\n  table {\n    width: 1100px; /*表格宽度*/\n    max-width: 1100px; /*表格最大宽度，避免表格过宽*/\n    border: 1px solid #dedede; /*表格外边框设置*/\n    margin: 1px auto; /*外边距*/\n    border-collapse: collapse; /*使用单一线条的边框*/\n    empty-cells: show; /*单元格无内容依旧绘制边框*/\n  }\n  table th,\n  table td {\n    height: 35px; /*统一每一行的默认高度*/\n    border: 1px solid #dedede; /*内部边框样式*/\n    padding: 0 10px; /*内边距*/\n  }\n  table th {\n    font-weight: bold; /*加粗*/\n    text-align: center !important; /*内容居中，加上 !important 避免被 Markdown 样式覆盖*/\n    background: #F8F8F8; /*背景色*/\n  }\n  table tbody tr:nth-child(n) {\n    background: #FFFFFF; \n  }\n  table tr:hover {\n    background: #EFEFEF; \n}\n  table th {\n    white-space: nowrap; /*表头内容强制在一行显示*/\n  }\n  table td:nth-child(1) {\n    white-space: nowrap; /*表格第一列单元格内容不换行*/\n  }\n</style>"},{"title":"Android 屏幕刷新机制","date":"2021-03-24T08:26:52.000Z","_content":"\n\n\n## ViewRootImpl::scheduleTraversals()\n\n```java\n    void scheduleTraversals() {\n      \t// 变量 mTraversalScheduled 的分析见小节3.1\n        if (!mTraversalScheduled) {\n          \t// 将变量 mTraversalScheduled 设为 true, 防止逻辑重入\n            mTraversalScheduled = true;          \n\n            // 发送同步消息屏障, 分析见小节3.2\n            mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();\n          \n          \t// 方法的第2个入参 mTraversalRunnable 的类型是Runnable, 分析见小节3.3\n          \t// Choreographer.postCallback 的分析见小节3.4\n            mChoreographer.postCallback(\n                    Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);\n          \n            if (!mUnbufferedInputDispatch) {\n                scheduleConsumeBatchedInput();\n            }\n            notifyRendererOfFramePending();\n            pokeDrawLockIfNeeded();\n        }\n    }\n```\n\n\n\n### ViewRootImpl::mTraversalScheduled\n\n变量 mTraversalScheduled 的声明如下：\n\n```java\n    public boolean mTraversalScheduled;\n```\n\n从变量声明可以看出，mTraversalScheduled 就是一个普通的 boolean 类型的变量。\n\n在 scheduleTraversals() 方法中，变量 mTraversalScheduled 的作用是防止重复执行同一段逻辑。\n\n对变量 mTraversalScheduled 的操作之所以没有加上线程同步，是因为 Android UI 操作是单线程的，在对变量 mTraversalScheduled 的操作之前都会检查一次线程，因此没必要对其加锁进行操作。\n\nmTraversalScheduled  变量只有在执行 scheduleTraversals() 方法的过程中才有机会将 mTraversalScheduled 设为 true。\n\n\n\n### MessageQueue::postSyncBarrier()\n\n```java\n    public int postSyncBarrier() {\n        return postSyncBarrier(SystemClock.uptimeMillis());\n    }\n\n    private int postSyncBarrier(long when) {\n        synchronized (this) {\n            final int token = mNextBarrierToken++;\n            final Message msg = Message.obtain();\n            msg.markInUse();\n            msg.when = when;\n            msg.arg1 = token;\n\n            Message prev = null;\n            Message p = mMessages;\n            if (when != 0) {\n                while (p != null && p.when <= when) {\n                    prev = p;\n                    p = p.next;\n                }\n            }\n            if (prev != null) { // invariant: p == prev.next\n                msg.next = p;\n                prev.next = msg;\n            } else {\n                msg.next = p;\n                mMessages = msg;\n            }\n            return token;\n        }\n    }\n```\n\n关于消息队列的同步消息屏障，在之前的一篇文章中分析过 (// TODO)，目的在于暂停处理所有的同步消息，优先处理\n\n\n\n### ViewRootImpl::mTraversalRunnable\n\n入参 mTraversalRunnable 是 TraversalRunnable 的实例，TraversalRunnable 的实现如下：\n\n```java\n    final class TraversalRunnable implements Runnable {\n        @Override\n        public void run() {\n            doTraversal();\n        }\n    }\n```\n\n这个 Runnable 执行的是 doTraversal() 方法，接着来看这个方法。\n\n#### ViewRootImpl::doTraversal()\n\n```java\n    void doTraversal() {\n        if (mTraversalScheduled) {\n          \t// TODO\n          \t// 在进入 doTraversal 的核心逻辑后, 首先将变量 mTraversalScheduled 置为 false\n          \t// 说明即使多次调用 scheduleTraversals() 方法, \n            mTraversalScheduled = false;\n          \n          \t// 移除消息屏障\n            mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);\n\n            // 省略...\n\n          \t// 触发 View 的绘制流程\n            performTraversals();\n\n            // 省略...\n        }\n    }\n```\n\nperformTraversals() 这个方法我曾经在之前的一篇文章 (// TODO) 中做过分析，View 的测量、布局、绘制三大流程都是由此方法发起的。\n\n现在可以知道，View 的绘制流程是在 doTraversal() 方法中发起的，而 doTraversal() 方法又被封装成一个 Runnable，接下来就要搞清楚这个 Runnable 是在什么时机被执行的。\n\n\n\n### Choreographer::postCallback(int, Runnable, Object)\n\n```java\n    public void postCallback(int callbackType, Runnable action, Object token) {\n        postCallbackDelayed(callbackType, action, token, 0);\n    }\n```\n\n\n\n\n\n","source":"_posts/2021-03-24-android-display-refresh.md","raw":"---\ntitle: Android 屏幕刷新机制\ndate: 2021-03-24 16:26:52\ntags:\ncategories:\n- [Android, Framework, Graphics]\n---\n\n\n\n## ViewRootImpl::scheduleTraversals()\n\n```java\n    void scheduleTraversals() {\n      \t// 变量 mTraversalScheduled 的分析见小节3.1\n        if (!mTraversalScheduled) {\n          \t// 将变量 mTraversalScheduled 设为 true, 防止逻辑重入\n            mTraversalScheduled = true;          \n\n            // 发送同步消息屏障, 分析见小节3.2\n            mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();\n          \n          \t// 方法的第2个入参 mTraversalRunnable 的类型是Runnable, 分析见小节3.3\n          \t// Choreographer.postCallback 的分析见小节3.4\n            mChoreographer.postCallback(\n                    Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);\n          \n            if (!mUnbufferedInputDispatch) {\n                scheduleConsumeBatchedInput();\n            }\n            notifyRendererOfFramePending();\n            pokeDrawLockIfNeeded();\n        }\n    }\n```\n\n\n\n### ViewRootImpl::mTraversalScheduled\n\n变量 mTraversalScheduled 的声明如下：\n\n```java\n    public boolean mTraversalScheduled;\n```\n\n从变量声明可以看出，mTraversalScheduled 就是一个普通的 boolean 类型的变量。\n\n在 scheduleTraversals() 方法中，变量 mTraversalScheduled 的作用是防止重复执行同一段逻辑。\n\n对变量 mTraversalScheduled 的操作之所以没有加上线程同步，是因为 Android UI 操作是单线程的，在对变量 mTraversalScheduled 的操作之前都会检查一次线程，因此没必要对其加锁进行操作。\n\nmTraversalScheduled  变量只有在执行 scheduleTraversals() 方法的过程中才有机会将 mTraversalScheduled 设为 true。\n\n\n\n### MessageQueue::postSyncBarrier()\n\n```java\n    public int postSyncBarrier() {\n        return postSyncBarrier(SystemClock.uptimeMillis());\n    }\n\n    private int postSyncBarrier(long when) {\n        synchronized (this) {\n            final int token = mNextBarrierToken++;\n            final Message msg = Message.obtain();\n            msg.markInUse();\n            msg.when = when;\n            msg.arg1 = token;\n\n            Message prev = null;\n            Message p = mMessages;\n            if (when != 0) {\n                while (p != null && p.when <= when) {\n                    prev = p;\n                    p = p.next;\n                }\n            }\n            if (prev != null) { // invariant: p == prev.next\n                msg.next = p;\n                prev.next = msg;\n            } else {\n                msg.next = p;\n                mMessages = msg;\n            }\n            return token;\n        }\n    }\n```\n\n关于消息队列的同步消息屏障，在之前的一篇文章中分析过 (// TODO)，目的在于暂停处理所有的同步消息，优先处理\n\n\n\n### ViewRootImpl::mTraversalRunnable\n\n入参 mTraversalRunnable 是 TraversalRunnable 的实例，TraversalRunnable 的实现如下：\n\n```java\n    final class TraversalRunnable implements Runnable {\n        @Override\n        public void run() {\n            doTraversal();\n        }\n    }\n```\n\n这个 Runnable 执行的是 doTraversal() 方法，接着来看这个方法。\n\n#### ViewRootImpl::doTraversal()\n\n```java\n    void doTraversal() {\n        if (mTraversalScheduled) {\n          \t// TODO\n          \t// 在进入 doTraversal 的核心逻辑后, 首先将变量 mTraversalScheduled 置为 false\n          \t// 说明即使多次调用 scheduleTraversals() 方法, \n            mTraversalScheduled = false;\n          \n          \t// 移除消息屏障\n            mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);\n\n            // 省略...\n\n          \t// 触发 View 的绘制流程\n            performTraversals();\n\n            // 省略...\n        }\n    }\n```\n\nperformTraversals() 这个方法我曾经在之前的一篇文章 (// TODO) 中做过分析，View 的测量、布局、绘制三大流程都是由此方法发起的。\n\n现在可以知道，View 的绘制流程是在 doTraversal() 方法中发起的，而 doTraversal() 方法又被封装成一个 Runnable，接下来就要搞清楚这个 Runnable 是在什么时机被执行的。\n\n\n\n### Choreographer::postCallback(int, Runnable, Object)\n\n```java\n    public void postCallback(int callbackType, Runnable action, Object token) {\n        postCallbackDelayed(callbackType, action, token, 0);\n    }\n```\n\n\n\n\n\n","slug":"android-display-refresh","published":1,"updated":"2021-03-25T03:52:21.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmqajiif0009ospr0rvvdz1m","content":"<h2 id=\"ViewRootImpl-scheduleTraversals\">0.1 ViewRootImpl::scheduleTraversals()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTraversals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">// 变量 mTraversalScheduled 的分析见小节3.1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mTraversalScheduled) &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 将变量 mTraversalScheduled 设为 true, 防止逻辑重入</span></span><br><span class=\"line\">        mTraversalScheduled = <span class=\"keyword\">true</span>;          </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发送同步消息屏障, 分析见小节3.2</span></span><br><span class=\"line\">        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</span><br><span class=\"line\">      </span><br><span class=\"line\">      \t<span class=\"comment\">// 方法的第2个入参 mTraversalRunnable 的类型是Runnable, 分析见小节3.3</span></span><br><span class=\"line\">      \t<span class=\"comment\">// Choreographer.postCallback 的分析见小节3.4</span></span><br><span class=\"line\">        mChoreographer.postCallback(</span><br><span class=\"line\">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mUnbufferedInputDispatch) &#123;</span><br><span class=\"line\">            scheduleConsumeBatchedInput();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        notifyRendererOfFramePending();</span><br><span class=\"line\">        pokeDrawLockIfNeeded();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"ViewRootImpl-mTraversalScheduled\">0.1.1 ViewRootImpl::mTraversalScheduled</h3><p>变量 mTraversalScheduled 的声明如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> mTraversalScheduled;</span><br></pre></td></tr></table></figure>\n<p>从变量声明可以看出，mTraversalScheduled 就是一个普通的 boolean 类型的变量。</p>\n<p>在 scheduleTraversals() 方法中，变量 mTraversalScheduled 的作用是防止重复执行同一段逻辑。</p>\n<p>对变量 mTraversalScheduled 的操作之所以没有加上线程同步，是因为 Android UI 操作是单线程的，在对变量 mTraversalScheduled 的操作之前都会检查一次线程，因此没必要对其加锁进行操作。</p>\n<p>mTraversalScheduled  变量只有在执行 scheduleTraversals() 方法的过程中才有机会将 mTraversalScheduled 设为 true。</p>\n<h3 id=\"MessageQueue-postSyncBarrier\">0.1.2 MessageQueue::postSyncBarrier()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">postSyncBarrier</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> postSyncBarrier(SystemClock.uptimeMillis());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">postSyncBarrier</span><span class=\"params\">(<span class=\"keyword\">long</span> when)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> token = mNextBarrierToken++;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Message msg = Message.obtain();</span><br><span class=\"line\">        msg.markInUse();</span><br><span class=\"line\">        msg.when = when;</span><br><span class=\"line\">        msg.arg1 = token;</span><br><span class=\"line\"></span><br><span class=\"line\">        Message prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Message p = mMessages;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (when != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.when &lt;= when) &#123;</span><br><span class=\"line\">                prev = p;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// invariant: p == prev.next</span></span><br><span class=\"line\">            msg.next = p;</span><br><span class=\"line\">            prev.next = msg;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            msg.next = p;</span><br><span class=\"line\">            mMessages = msg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于消息队列的同步消息屏障，在之前的一篇文章中分析过 (// TODO)，目的在于暂停处理所有的同步消息，优先处理</p>\n<h3 id=\"ViewRootImpl-mTraversalRunnable\">0.1.3 ViewRootImpl::mTraversalRunnable</h3><p>入参 mTraversalRunnable 是 TraversalRunnable 的实例，TraversalRunnable 的实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraversalRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        doTraversal();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个 Runnable 执行的是 doTraversal() 方法，接着来看这个方法。</p>\n<h4 id=\"ViewRootImpl-doTraversal\">0.1.3.1 ViewRootImpl::doTraversal()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doTraversal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mTraversalScheduled) &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// TODO</span></span><br><span class=\"line\">      \t<span class=\"comment\">// 在进入 doTraversal 的核心逻辑后, 首先将变量 mTraversalScheduled 置为 false</span></span><br><span class=\"line\">      \t<span class=\"comment\">// 说明即使多次调用 scheduleTraversals() 方法, </span></span><br><span class=\"line\">        mTraversalScheduled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">      \t<span class=\"comment\">// 移除消息屏障</span></span><br><span class=\"line\">        mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\">      \t<span class=\"comment\">// 触发 View 的绘制流程</span></span><br><span class=\"line\">        performTraversals();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>performTraversals() 这个方法我曾经在之前的一篇文章 (// TODO) 中做过分析，View 的测量、布局、绘制三大流程都是由此方法发起的。</p>\n<p>现在可以知道，View 的绘制流程是在 doTraversal() 方法中发起的，而 doTraversal() 方法又被封装成一个 Runnable，接下来就要搞清楚这个 Runnable 是在什么时机被执行的。</p>\n<h3 id=\"Choreographer-postCallback-int-Runnable-Object\">0.1.4 Choreographer::postCallback(int, Runnable, Object)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postCallback</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType, Runnable action, Object token)</span> </span>&#123;</span><br><span class=\"line\">    postCallbackDelayed(callbackType, action, token, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ViewRootImpl-scheduleTraversals\"><a href=\"#ViewRootImpl-scheduleTraversals\" class=\"headerlink\" title=\"ViewRootImpl::scheduleTraversals()\"></a>ViewRootImpl::scheduleTraversals()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTraversals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">// 变量 mTraversalScheduled 的分析见小节3.1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mTraversalScheduled) &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 将变量 mTraversalScheduled 设为 true, 防止逻辑重入</span></span><br><span class=\"line\">        mTraversalScheduled = <span class=\"keyword\">true</span>;          </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发送同步消息屏障, 分析见小节3.2</span></span><br><span class=\"line\">        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</span><br><span class=\"line\">      </span><br><span class=\"line\">      \t<span class=\"comment\">// 方法的第2个入参 mTraversalRunnable 的类型是Runnable, 分析见小节3.3</span></span><br><span class=\"line\">      \t<span class=\"comment\">// Choreographer.postCallback 的分析见小节3.4</span></span><br><span class=\"line\">        mChoreographer.postCallback(</span><br><span class=\"line\">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mUnbufferedInputDispatch) &#123;</span><br><span class=\"line\">            scheduleConsumeBatchedInput();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        notifyRendererOfFramePending();</span><br><span class=\"line\">        pokeDrawLockIfNeeded();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"ViewRootImpl-mTraversalScheduled\"><a href=\"#ViewRootImpl-mTraversalScheduled\" class=\"headerlink\" title=\"ViewRootImpl::mTraversalScheduled\"></a>ViewRootImpl::mTraversalScheduled</h3><p>变量 mTraversalScheduled 的声明如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> mTraversalScheduled;</span><br></pre></td></tr></table></figure>\n<p>从变量声明可以看出，mTraversalScheduled 就是一个普通的 boolean 类型的变量。</p>\n<p>在 scheduleTraversals() 方法中，变量 mTraversalScheduled 的作用是防止重复执行同一段逻辑。</p>\n<p>对变量 mTraversalScheduled 的操作之所以没有加上线程同步，是因为 Android UI 操作是单线程的，在对变量 mTraversalScheduled 的操作之前都会检查一次线程，因此没必要对其加锁进行操作。</p>\n<p>mTraversalScheduled  变量只有在执行 scheduleTraversals() 方法的过程中才有机会将 mTraversalScheduled 设为 true。</p>\n<h3 id=\"MessageQueue-postSyncBarrier\"><a href=\"#MessageQueue-postSyncBarrier\" class=\"headerlink\" title=\"MessageQueue::postSyncBarrier()\"></a>MessageQueue::postSyncBarrier()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">postSyncBarrier</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> postSyncBarrier(SystemClock.uptimeMillis());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">postSyncBarrier</span><span class=\"params\">(<span class=\"keyword\">long</span> when)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> token = mNextBarrierToken++;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Message msg = Message.obtain();</span><br><span class=\"line\">        msg.markInUse();</span><br><span class=\"line\">        msg.when = when;</span><br><span class=\"line\">        msg.arg1 = token;</span><br><span class=\"line\"></span><br><span class=\"line\">        Message prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Message p = mMessages;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (when != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.when &lt;= when) &#123;</span><br><span class=\"line\">                prev = p;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// invariant: p == prev.next</span></span><br><span class=\"line\">            msg.next = p;</span><br><span class=\"line\">            prev.next = msg;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            msg.next = p;</span><br><span class=\"line\">            mMessages = msg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于消息队列的同步消息屏障，在之前的一篇文章中分析过 (// TODO)，目的在于暂停处理所有的同步消息，优先处理</p>\n<h3 id=\"ViewRootImpl-mTraversalRunnable\"><a href=\"#ViewRootImpl-mTraversalRunnable\" class=\"headerlink\" title=\"ViewRootImpl::mTraversalRunnable\"></a>ViewRootImpl::mTraversalRunnable</h3><p>入参 mTraversalRunnable 是 TraversalRunnable 的实例，TraversalRunnable 的实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TraversalRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        doTraversal();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个 Runnable 执行的是 doTraversal() 方法，接着来看这个方法。</p>\n<h4 id=\"ViewRootImpl-doTraversal\"><a href=\"#ViewRootImpl-doTraversal\" class=\"headerlink\" title=\"ViewRootImpl::doTraversal()\"></a>ViewRootImpl::doTraversal()</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doTraversal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mTraversalScheduled) &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// TODO</span></span><br><span class=\"line\">      \t<span class=\"comment\">// 在进入 doTraversal 的核心逻辑后, 首先将变量 mTraversalScheduled 置为 false</span></span><br><span class=\"line\">      \t<span class=\"comment\">// 说明即使多次调用 scheduleTraversals() 方法, </span></span><br><span class=\"line\">        mTraversalScheduled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">      \t<span class=\"comment\">// 移除消息屏障</span></span><br><span class=\"line\">        mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\">      \t<span class=\"comment\">// 触发 View 的绘制流程</span></span><br><span class=\"line\">        performTraversals();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>performTraversals() 这个方法我曾经在之前的一篇文章 (// TODO) 中做过分析，View 的测量、布局、绘制三大流程都是由此方法发起的。</p>\n<p>现在可以知道，View 的绘制流程是在 doTraversal() 方法中发起的，而 doTraversal() 方法又被封装成一个 Runnable，接下来就要搞清楚这个 Runnable 是在什么时机被执行的。</p>\n<h3 id=\"Choreographer-postCallback-int-Runnable-Object\"><a href=\"#Choreographer-postCallback-int-Runnable-Object\" class=\"headerlink\" title=\"Choreographer::postCallback(int, Runnable, Object)\"></a>Choreographer::postCallback(int, Runnable, Object)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postCallback</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType, Runnable action, Object token)</span> </span>&#123;</span><br><span class=\"line\">    postCallbackDelayed(callbackType, action, token, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"Android 同步屏障","date":"2021-03-25T07:34:53.000Z","_content":"\n在 Android 系统源码中，多处使用了同步屏障。例如：\n\n```java\n// ViewRootImpl.java\n\nvoid scheduleTraversals() {\n    if (!mTraversalScheduled) {\n        mTraversalScheduled = true;\n\n        // 发起同步屏障\n        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();\n\n        // 监听下一帧的信号\n        mChoreographer.postCallback(\n                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);\n\n        // 省略...\n    }\n}\n```\n\n这是 Android 屏幕刷新过程中的一个操作，在调用 postCallback(int, Runnable, Object) 方法监听下一帧信号之前，首先向当前线程的消息队列发起了同步屏障。\n\n接下来我们通过对源码的解读，分析出同步屏障的作用到底是什么。\n\n\n\n<!-- more -->\n\n# 1. Message 的种类\n\nMessage 中有一个 flag 变量，用于标记 Message 的类型。\n\n## 1.1 Message::setAsynchronous(boolean)\n\n```java\npublic void setAsynchronous(boolean async) {\n    if (async) {\n        // 异步消息, 通过或运算添加 FLAG_ASYNCHRONOUS 标记\n        flags |= FLAG_ASYNCHRONOUS;\n    } else {\n        // 同步消息, 通过与运算移除 FLAG_ASYNCHRONOUS 标记\n        flags &= ~FLAG_ASYNCHRONOUS;\n    }\n}\n```\n\n调用 setAsynchronous(boolean) 方法，可以将 Message 设置为**同步消息**或者**异步消息**。\n\n## 1.2 Message::isAsynchronous()\n\n```java\npublic boolean isAsynchronous() {\n    // 通过与运算判断 flags 是否带有 FLAG_ASYNCHRONOUS 标记\n    return (flags & FLAG_ASYNCHRONOUS) != 0;\n}\n```\n\n通过 isAsynchronous() 方法，可以判断 Message 是**同步消息**还是**异步消息**。\n\n由此可知，Message 可以分为两类：\n\n- 同步消息\n- 异步消息\n\n\n\n# 2. 发起同步屏障\n\n在屏幕刷新的例子中，同步屏障是通过调用 MessageQueue::postSyncBarrier() 方法发起的，实际上是间接调用了 MessageQueue::postSyncBarrier(long) 方法。\n\n```java\npublic int postSyncBarrier() {\n    return postSyncBarrier(SystemClock.uptimeMillis());\n}\n```\n\n这里传入的 SystemClock.uptimeMillis() 参数，表示了从系统启动到当前时刻经过的时间。\n\n```java\nprivate int postSyncBarrier(long when) {\n    // 注意到这里需要加锁进行操作, 因为 postSyncBarrier() 方法是有可能在多线程环境下调用\n    synchronized (this) {\n\n        // mNextBarrierToken 是 int 类型, token 实际上是通过发起同步屏障次数来表示的\n        final int token = mNextBarrierToken++;\n\n        // 注意到 Message 实例是通过 Message.obtain() 方法获取的, 分析见小节2.1\n        final Message msg = Message.obtain();\n        msg.markInUse();\n        msg.when = when;\n        msg.arg1 = token;\n\n        // 这里所做的就是按照消息执行时刻 when 排序, 将新建的 Message 实例插入到消息队列中对应的位置\n        // 注意到, 对于所以已在消息队列中的消息 p, 如果满足 p.when <= when, 则消息 p 排在新建的 Message 之前, 优先处理消息 p\n        Message prev = null;\n        Message p = mMessages;\n        if (when != 0) {\n            while (p != null && p.when <= when) {\n                prev = p;\n                p = p.next;\n            }\n        }\n        if (prev != null) { // invariant: p == prev.next\n            msg.next = p;\n            prev.next = msg;\n        } else {\n            msg.next = p;\n            mMessages = msg;\n        }\n\n        // 返回特定的 token, 用于取消同步屏障, 分析见[小节4]\n        return token;\n    }\n}\n```\n\n## 2.1 获取 Message 实例\n\n```java\nfinal Message msg = Message.obtain();\nmsg.markInUse();\nmsg.when = when;\nmsg.arg1 = token;\n```\n\nMessage 实例是通过 Message.obtain() 方法获取的，来看看这个方法：\n\n```java\npublic static Message obtain() {\n    synchronized (sPoolSync) {\n        if (sPool != null) {\n            Message m = sPool;\n            sPool = m.next;\n            m.next = null;\n            m.flags = 0; // clear in-use flag\n            sPoolSize--;\n            return m;\n        }\n    }\n    return new Message();\n}\n```\n\n从这个方法可以看出来，Message 实例是从缓存池中获取的，当缓存池没有可用的 Message 时，则新建一个 Message 对象。\n\n在获取到 Message 实例以后，将其标记为使用中，并设置 Message 的 when 和 arg1 属性。\n\n我们知道，Message 中有一个重要的属性 target，其类型为 Handler。当消息被消费时，用于处理该消息的 Handler 就是 message.target 指向的 Handler。\n\n但是，这里创建出的 Message 实例没有设置 target，也就是 message.target = null。\n\n\n\n## 2.2 小结\n\n通过上面的分析，我们知道发起同步屏障其实就是将一个**不带有 target 属性的 Message (接下来我将称之为同步屏障消息)** 按照执行时间的先后顺序插入到消息队列中。\n\n现在消息队列中已经存在这样一个独特的消息，接着就需要分析 Android 是如何处理这种消息的。\n\n\n\n# 3. 处理同步屏障消息\n\n在 Android Handler 机制中，Looper 负责将 Message 分发给目标 Handler，依靠的是 Looper::loop() 方法中不断执行的 for 循环 ，首先来分析这个方法是如何获取 Message。\n\n## 3.1 Looper::loop()\n\n```java\npublic static void loop() {\n    final Looper me = myLooper();\n\n    // 省略...\n\n    final MessageQueue queue = me.mQueue;\n\n    // 省略...\n\n    for (;;) {\n        Message msg = queue.next();\n\n        // 省略消息的处理过程\n    }\n}\n```\n\n从代码可以看出，Looper 其实是从 MessageQueue 不断取出 Message，然后再对 Message 进行处理的。\n\n接着来分析 MessageQueue::next() 方法，了解 Message 是怎么获取的。\n\n\n\n## 3.2 MessageQueue::next()\n\n为了分析处理同步屏障消息这种场景，现在假设所有的按时间顺序排在同步屏障消息之前的 Message 都已经被消费，换句话说，现在**位于消息队列头部**的 Message 就是同步屏障消息。\n\n```java\nMessage next() {\n    // 省略...\n\n    for (;;) {\n        // 省略...\n\n        synchronized (this) {\n            final long now = SystemClock.uptimeMillis();\n\n            Message prevMsg = null;\n\n            // mMessages 其实就是队列头部的 Message\n            Message msg = mMessages;\n\n            // 根据假设, 现在我们知道 msg 就是同步屏障消息, msg.target = null 成立, 会进入以下代码分支\n            if (msg != null && msg.target == null) {\n                // isAsynchronous() 方法可以判断一个 Message 是同步消息还是异步消息\n                // 这个循环目的是找出一个异步消息, 将其赋值给 msg\n                do {\n                    prevMsg = msg;\n                    msg = msg.next;\n                } while (msg != null && !msg.isAsynchronous());\n            }\n\n            if (msg != null) {\n                // 如果找到目标 Message, 则进入以下代码分支\n                if (now < msg.when) {\n                    // 当目标 Message 触发时间大于当前时间, 则设置下一次轮询的超时时长\n                    nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\n                } else {\n                  // 目标 Message 可以立即消费\n                    mBlocked = false;\n\n                    // 这里对消息队列的操作, 目的是将目标 Message 从消息队列中移除\n                    if (prevMsg != null) {\n                      // 注意到, 在处理同步屏障消息的场景下, prevMsg 不可能是 null, 同步屏障消息不会被消费\n                      // 在这里场景下, 被消费的总是异步消息\n                        prevMsg.next = msg.next;\n                    } else {\n                        mMessages = msg.next;\n                    }\n                    msg.next = null;\n\n                    if (DEBUG) Log.v(TAG, \"Returning message: \" + msg);\n                    msg.markInUse();\n\n                    // 返回异步消息\n                    return msg;\n                }\n            } else {\n                // 队列中没有可以消费的异步消息\n                nextPollTimeoutMillis = -1;\n            }\n\n            // 省略...\n        }\n\n        // 省略...\n    }\n}\n```\n\n\n\n## 3.3 小结\n\n通过上面的分析，可以得出一些结论：\n\n- 同步屏障的目的是：阻塞消息队列中同步消息的消费，**只处理异步消息**。\n- 在发起同步屏障之后，由于在消息队列中的**同步屏障消息不会被自动消费**，必须手动移除同步屏障。\n- 在没有同步屏障的场景下，同步消息和异步消息在**从消息队列获取消息的过程**中没有区别。\n\n\n\n# 4. 移除同步屏障\n\n经过上面的分析，现在我们知道，在发起同步屏障之后，由于在消息队列中的**同步屏障消息不会被自动消费**，Android 提供了 MessageQueue::removeSyncBarrier(int) 方法让我们手动移除同步屏障，来看看这个方法做了什么。\n\n## 4.1 MessageQueue::removeSyncBarrier(int)\n\n```java\npublic void removeSyncBarrier(int token) {\n  \t// 注意到这里需要加锁进行操作, 因为 removeSyncBarrier(int) 方法是有可能在多线程环境下调用\n    synchronized (this) {\n        Message prev = null;\n\n      \t// mMessages 是位于队列头部的 Message\n        Message p = mMessages;\n\n      \t// 在发起同步屏障时, 新建 Message 实例的 arg1 属性存储的就是 token\n      \t// 所以这个循环的目的是: 找到 token 相等的同步屏障消息, 将其赋值给 p\n        while (p != null && (p.target != null || p.arg1 != token)) {\n            prev = p;\n            p = p.next;\n        }\n\n        if (p == null) {\n          \t// 在找不到目标同步屏障消息时, 会抛出异常\n            throw new IllegalStateException(\"The specified message queue synchronization \"\n                    + \" barrier token has not been posted or has already been removed.\");\n        }\n\n        final boolean needWake;\n\n      \t// 将目标同步屏障消息从消息队列中移除\n        if (prev != null) {\n            prev.next = p.next;\n            needWake = false;\n        } else {\n            mMessages = p.next;\n            needWake = mMessages == null || mMessages.target != null;\n        }\n        p.recycleUnchecked();\n\n        // 省略...\n    }\n}\n```\n\n\n\n## 4.2 小结\n\n从代码中可以看出，想要移除同步屏障，需要保存发起同步屏障 postSyncBarrier() 方法的返回值 token，根据 token 对应地移除同步屏障。\n\n\n","source":"_posts/2021-03-25-android-sync-barrier.md","raw":"---\ntitle: Android 同步屏障\ndate: 2021-03-25 15:34:53\ntags:\ncategories:\n- [Android, Framework, Handler]\n---\n\n在 Android 系统源码中，多处使用了同步屏障。例如：\n\n```java\n// ViewRootImpl.java\n\nvoid scheduleTraversals() {\n    if (!mTraversalScheduled) {\n        mTraversalScheduled = true;\n\n        // 发起同步屏障\n        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();\n\n        // 监听下一帧的信号\n        mChoreographer.postCallback(\n                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);\n\n        // 省略...\n    }\n}\n```\n\n这是 Android 屏幕刷新过程中的一个操作，在调用 postCallback(int, Runnable, Object) 方法监听下一帧信号之前，首先向当前线程的消息队列发起了同步屏障。\n\n接下来我们通过对源码的解读，分析出同步屏障的作用到底是什么。\n\n\n\n<!-- more -->\n\n# 1. Message 的种类\n\nMessage 中有一个 flag 变量，用于标记 Message 的类型。\n\n## 1.1 Message::setAsynchronous(boolean)\n\n```java\npublic void setAsynchronous(boolean async) {\n    if (async) {\n        // 异步消息, 通过或运算添加 FLAG_ASYNCHRONOUS 标记\n        flags |= FLAG_ASYNCHRONOUS;\n    } else {\n        // 同步消息, 通过与运算移除 FLAG_ASYNCHRONOUS 标记\n        flags &= ~FLAG_ASYNCHRONOUS;\n    }\n}\n```\n\n调用 setAsynchronous(boolean) 方法，可以将 Message 设置为**同步消息**或者**异步消息**。\n\n## 1.2 Message::isAsynchronous()\n\n```java\npublic boolean isAsynchronous() {\n    // 通过与运算判断 flags 是否带有 FLAG_ASYNCHRONOUS 标记\n    return (flags & FLAG_ASYNCHRONOUS) != 0;\n}\n```\n\n通过 isAsynchronous() 方法，可以判断 Message 是**同步消息**还是**异步消息**。\n\n由此可知，Message 可以分为两类：\n\n- 同步消息\n- 异步消息\n\n\n\n# 2. 发起同步屏障\n\n在屏幕刷新的例子中，同步屏障是通过调用 MessageQueue::postSyncBarrier() 方法发起的，实际上是间接调用了 MessageQueue::postSyncBarrier(long) 方法。\n\n```java\npublic int postSyncBarrier() {\n    return postSyncBarrier(SystemClock.uptimeMillis());\n}\n```\n\n这里传入的 SystemClock.uptimeMillis() 参数，表示了从系统启动到当前时刻经过的时间。\n\n```java\nprivate int postSyncBarrier(long when) {\n    // 注意到这里需要加锁进行操作, 因为 postSyncBarrier() 方法是有可能在多线程环境下调用\n    synchronized (this) {\n\n        // mNextBarrierToken 是 int 类型, token 实际上是通过发起同步屏障次数来表示的\n        final int token = mNextBarrierToken++;\n\n        // 注意到 Message 实例是通过 Message.obtain() 方法获取的, 分析见小节2.1\n        final Message msg = Message.obtain();\n        msg.markInUse();\n        msg.when = when;\n        msg.arg1 = token;\n\n        // 这里所做的就是按照消息执行时刻 when 排序, 将新建的 Message 实例插入到消息队列中对应的位置\n        // 注意到, 对于所以已在消息队列中的消息 p, 如果满足 p.when <= when, 则消息 p 排在新建的 Message 之前, 优先处理消息 p\n        Message prev = null;\n        Message p = mMessages;\n        if (when != 0) {\n            while (p != null && p.when <= when) {\n                prev = p;\n                p = p.next;\n            }\n        }\n        if (prev != null) { // invariant: p == prev.next\n            msg.next = p;\n            prev.next = msg;\n        } else {\n            msg.next = p;\n            mMessages = msg;\n        }\n\n        // 返回特定的 token, 用于取消同步屏障, 分析见[小节4]\n        return token;\n    }\n}\n```\n\n## 2.1 获取 Message 实例\n\n```java\nfinal Message msg = Message.obtain();\nmsg.markInUse();\nmsg.when = when;\nmsg.arg1 = token;\n```\n\nMessage 实例是通过 Message.obtain() 方法获取的，来看看这个方法：\n\n```java\npublic static Message obtain() {\n    synchronized (sPoolSync) {\n        if (sPool != null) {\n            Message m = sPool;\n            sPool = m.next;\n            m.next = null;\n            m.flags = 0; // clear in-use flag\n            sPoolSize--;\n            return m;\n        }\n    }\n    return new Message();\n}\n```\n\n从这个方法可以看出来，Message 实例是从缓存池中获取的，当缓存池没有可用的 Message 时，则新建一个 Message 对象。\n\n在获取到 Message 实例以后，将其标记为使用中，并设置 Message 的 when 和 arg1 属性。\n\n我们知道，Message 中有一个重要的属性 target，其类型为 Handler。当消息被消费时，用于处理该消息的 Handler 就是 message.target 指向的 Handler。\n\n但是，这里创建出的 Message 实例没有设置 target，也就是 message.target = null。\n\n\n\n## 2.2 小结\n\n通过上面的分析，我们知道发起同步屏障其实就是将一个**不带有 target 属性的 Message (接下来我将称之为同步屏障消息)** 按照执行时间的先后顺序插入到消息队列中。\n\n现在消息队列中已经存在这样一个独特的消息，接着就需要分析 Android 是如何处理这种消息的。\n\n\n\n# 3. 处理同步屏障消息\n\n在 Android Handler 机制中，Looper 负责将 Message 分发给目标 Handler，依靠的是 Looper::loop() 方法中不断执行的 for 循环 ，首先来分析这个方法是如何获取 Message。\n\n## 3.1 Looper::loop()\n\n```java\npublic static void loop() {\n    final Looper me = myLooper();\n\n    // 省略...\n\n    final MessageQueue queue = me.mQueue;\n\n    // 省略...\n\n    for (;;) {\n        Message msg = queue.next();\n\n        // 省略消息的处理过程\n    }\n}\n```\n\n从代码可以看出，Looper 其实是从 MessageQueue 不断取出 Message，然后再对 Message 进行处理的。\n\n接着来分析 MessageQueue::next() 方法，了解 Message 是怎么获取的。\n\n\n\n## 3.2 MessageQueue::next()\n\n为了分析处理同步屏障消息这种场景，现在假设所有的按时间顺序排在同步屏障消息之前的 Message 都已经被消费，换句话说，现在**位于消息队列头部**的 Message 就是同步屏障消息。\n\n```java\nMessage next() {\n    // 省略...\n\n    for (;;) {\n        // 省略...\n\n        synchronized (this) {\n            final long now = SystemClock.uptimeMillis();\n\n            Message prevMsg = null;\n\n            // mMessages 其实就是队列头部的 Message\n            Message msg = mMessages;\n\n            // 根据假设, 现在我们知道 msg 就是同步屏障消息, msg.target = null 成立, 会进入以下代码分支\n            if (msg != null && msg.target == null) {\n                // isAsynchronous() 方法可以判断一个 Message 是同步消息还是异步消息\n                // 这个循环目的是找出一个异步消息, 将其赋值给 msg\n                do {\n                    prevMsg = msg;\n                    msg = msg.next;\n                } while (msg != null && !msg.isAsynchronous());\n            }\n\n            if (msg != null) {\n                // 如果找到目标 Message, 则进入以下代码分支\n                if (now < msg.when) {\n                    // 当目标 Message 触发时间大于当前时间, 则设置下一次轮询的超时时长\n                    nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\n                } else {\n                  // 目标 Message 可以立即消费\n                    mBlocked = false;\n\n                    // 这里对消息队列的操作, 目的是将目标 Message 从消息队列中移除\n                    if (prevMsg != null) {\n                      // 注意到, 在处理同步屏障消息的场景下, prevMsg 不可能是 null, 同步屏障消息不会被消费\n                      // 在这里场景下, 被消费的总是异步消息\n                        prevMsg.next = msg.next;\n                    } else {\n                        mMessages = msg.next;\n                    }\n                    msg.next = null;\n\n                    if (DEBUG) Log.v(TAG, \"Returning message: \" + msg);\n                    msg.markInUse();\n\n                    // 返回异步消息\n                    return msg;\n                }\n            } else {\n                // 队列中没有可以消费的异步消息\n                nextPollTimeoutMillis = -1;\n            }\n\n            // 省略...\n        }\n\n        // 省略...\n    }\n}\n```\n\n\n\n## 3.3 小结\n\n通过上面的分析，可以得出一些结论：\n\n- 同步屏障的目的是：阻塞消息队列中同步消息的消费，**只处理异步消息**。\n- 在发起同步屏障之后，由于在消息队列中的**同步屏障消息不会被自动消费**，必须手动移除同步屏障。\n- 在没有同步屏障的场景下，同步消息和异步消息在**从消息队列获取消息的过程**中没有区别。\n\n\n\n# 4. 移除同步屏障\n\n经过上面的分析，现在我们知道，在发起同步屏障之后，由于在消息队列中的**同步屏障消息不会被自动消费**，Android 提供了 MessageQueue::removeSyncBarrier(int) 方法让我们手动移除同步屏障，来看看这个方法做了什么。\n\n## 4.1 MessageQueue::removeSyncBarrier(int)\n\n```java\npublic void removeSyncBarrier(int token) {\n  \t// 注意到这里需要加锁进行操作, 因为 removeSyncBarrier(int) 方法是有可能在多线程环境下调用\n    synchronized (this) {\n        Message prev = null;\n\n      \t// mMessages 是位于队列头部的 Message\n        Message p = mMessages;\n\n      \t// 在发起同步屏障时, 新建 Message 实例的 arg1 属性存储的就是 token\n      \t// 所以这个循环的目的是: 找到 token 相等的同步屏障消息, 将其赋值给 p\n        while (p != null && (p.target != null || p.arg1 != token)) {\n            prev = p;\n            p = p.next;\n        }\n\n        if (p == null) {\n          \t// 在找不到目标同步屏障消息时, 会抛出异常\n            throw new IllegalStateException(\"The specified message queue synchronization \"\n                    + \" barrier token has not been posted or has already been removed.\");\n        }\n\n        final boolean needWake;\n\n      \t// 将目标同步屏障消息从消息队列中移除\n        if (prev != null) {\n            prev.next = p.next;\n            needWake = false;\n        } else {\n            mMessages = p.next;\n            needWake = mMessages == null || mMessages.target != null;\n        }\n        p.recycleUnchecked();\n\n        // 省略...\n    }\n}\n```\n\n\n\n## 4.2 小结\n\n从代码中可以看出，想要移除同步屏障，需要保存发起同步屏障 postSyncBarrier() 方法的返回值 token，根据 token 对应地移除同步屏障。\n\n\n","slug":"android-sync-barrier","published":1,"updated":"2021-03-26T13:11:01.816Z","_id":"ckmqajiii000dospr0k5u6zhd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在 Android 系统源码中，多处使用了同步屏障。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ViewRootImpl.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTraversals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mTraversalScheduled) &#123;</span><br><span class=\"line\">        mTraversalScheduled = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发起同步屏障</span></span><br><span class=\"line\">        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 监听下一帧的信号</span></span><br><span class=\"line\">        mChoreographer.postCallback(</span><br><span class=\"line\">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是 Android 屏幕刷新过程中的一个操作，在调用 postCallback(int, Runnable, Object) 方法监听下一帧信号之前，首先向当前线程的消息队列发起了同步屏障。</p>\n<p>接下来我们通过对源码的解读，分析出同步屏障的作用到底是什么。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"1-Message-的种类\"><a href=\"#1-Message-的种类\" class=\"headerlink\" title=\"1. Message 的种类\"></a>1. Message 的种类</h1><p>Message 中有一个 flag 变量，用于标记 Message 的类型。</p>\n<h2 id=\"1-1-Message-setAsynchronous-boolean\"><a href=\"#1-1-Message-setAsynchronous-boolean\" class=\"headerlink\" title=\"1.1 Message::setAsynchronous(boolean)\"></a>1.1 Message::setAsynchronous(boolean)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAsynchronous</span><span class=\"params\">(<span class=\"keyword\">boolean</span> async)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (async) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步消息, 通过或运算添加 FLAG_ASYNCHRONOUS 标记</span></span><br><span class=\"line\">        flags |= FLAG_ASYNCHRONOUS;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同步消息, 通过与运算移除 FLAG_ASYNCHRONOUS 标记</span></span><br><span class=\"line\">        flags &amp;= ~FLAG_ASYNCHRONOUS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用 setAsynchronous(boolean) 方法，可以将 Message 设置为<strong>同步消息</strong>或者<strong>异步消息</strong>。</p>\n<h2 id=\"1-2-Message-isAsynchronous\"><a href=\"#1-2-Message-isAsynchronous\" class=\"headerlink\" title=\"1.2 Message::isAsynchronous()\"></a>1.2 Message::isAsynchronous()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAsynchronous</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过与运算判断 flags 是否带有 FLAG_ASYNCHRONOUS 标记</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (flags &amp; FLAG_ASYNCHRONOUS) != <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 isAsynchronous() 方法，可以判断 Message 是<strong>同步消息</strong>还是<strong>异步消息</strong>。</p>\n<p>由此可知，Message 可以分为两类：</p>\n<ul>\n<li>同步消息</li>\n<li>异步消息</li>\n</ul>\n<h1 id=\"2-发起同步屏障\"><a href=\"#2-发起同步屏障\" class=\"headerlink\" title=\"2. 发起同步屏障\"></a>2. 发起同步屏障</h1><p>在屏幕刷新的例子中，同步屏障是通过调用 MessageQueue::postSyncBarrier() 方法发起的，实际上是间接调用了 MessageQueue::postSyncBarrier(long) 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">postSyncBarrier</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> postSyncBarrier(SystemClock.uptimeMillis());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里传入的 SystemClock.uptimeMillis() 参数，表示了从系统启动到当前时刻经过的时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">postSyncBarrier</span><span class=\"params\">(<span class=\"keyword\">long</span> when)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意到这里需要加锁进行操作, 因为 postSyncBarrier() 方法是有可能在多线程环境下调用</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// mNextBarrierToken 是 int 类型, token 实际上是通过发起同步屏障次数来表示的</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> token = mNextBarrierToken++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注意到 Message 实例是通过 Message.obtain() 方法获取的, 分析见小节2.1</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Message msg = Message.obtain();</span><br><span class=\"line\">        msg.markInUse();</span><br><span class=\"line\">        msg.when = when;</span><br><span class=\"line\">        msg.arg1 = token;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这里所做的就是按照消息执行时刻 when 排序, 将新建的 Message 实例插入到消息队列中对应的位置</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意到, 对于所以已在消息队列中的消息 p, 如果满足 p.when &lt;= when, 则消息 p 排在新建的 Message 之前, 优先处理消息 p</span></span><br><span class=\"line\">        Message prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Message p = mMessages;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (when != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.when &lt;= when) &#123;</span><br><span class=\"line\">                prev = p;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// invariant: p == prev.next</span></span><br><span class=\"line\">            msg.next = p;</span><br><span class=\"line\">            prev.next = msg;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            msg.next = p;</span><br><span class=\"line\">            mMessages = msg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回特定的 token, 用于取消同步屏障, 分析见[小节4]</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-获取-Message-实例\"><a href=\"#2-1-获取-Message-实例\" class=\"headerlink\" title=\"2.1 获取 Message 实例\"></a>2.1 获取 Message 实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Message msg = Message.obtain();</span><br><span class=\"line\">msg.markInUse();</span><br><span class=\"line\">msg.when = when;</span><br><span class=\"line\">msg.arg1 = token;</span><br></pre></td></tr></table></figure>\n<p>Message 实例是通过 Message.obtain() 方法获取的，来看看这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Message <span class=\"title\">obtain</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (sPoolSync) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sPool != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Message m = sPool;</span><br><span class=\"line\">            sPool = m.next;</span><br><span class=\"line\">            m.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            m.flags = <span class=\"number\">0</span>; <span class=\"comment\">// clear in-use flag</span></span><br><span class=\"line\">            sPoolSize--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Message();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这个方法可以看出来，Message 实例是从缓存池中获取的，当缓存池没有可用的 Message 时，则新建一个 Message 对象。</p>\n<p>在获取到 Message 实例以后，将其标记为使用中，并设置 Message 的 when 和 arg1 属性。</p>\n<p>我们知道，Message 中有一个重要的属性 target，其类型为 Handler。当消息被消费时，用于处理该消息的 Handler 就是 message.target 指向的 Handler。</p>\n<p>但是，这里创建出的 Message 实例没有设置 target，也就是 message.target = null。</p>\n<h2 id=\"2-2-小结\"><a href=\"#2-2-小结\" class=\"headerlink\" title=\"2.2 小结\"></a>2.2 小结</h2><p>通过上面的分析，我们知道发起同步屏障其实就是将一个<strong>不带有 target 属性的 Message (接下来我将称之为同步屏障消息)</strong> 按照执行时间的先后顺序插入到消息队列中。</p>\n<p>现在消息队列中已经存在这样一个独特的消息，接着就需要分析 Android 是如何处理这种消息的。</p>\n<h1 id=\"3-处理同步屏障消息\"><a href=\"#3-处理同步屏障消息\" class=\"headerlink\" title=\"3. 处理同步屏障消息\"></a>3. 处理同步屏障消息</h1><p>在 Android Handler 机制中，Looper 负责将 Message 分发给目标 Handler，依靠的是 Looper::loop() 方法中不断执行的 for 循环 ，首先来分析这个方法是如何获取 Message。</p>\n<h2 id=\"3-1-Looper-loop\"><a href=\"#3-1-Looper-loop\" class=\"headerlink\" title=\"3.1 Looper::loop()\"></a>3.1 Looper::loop()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Looper me = myLooper();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        Message msg = queue.next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 省略消息的处理过程</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码可以看出，Looper 其实是从 MessageQueue 不断取出 Message，然后再对 Message 进行处理的。</p>\n<p>接着来分析 MessageQueue::next() 方法，了解 Message 是怎么获取的。</p>\n<h2 id=\"3-2-MessageQueue-next\"><a href=\"#3-2-MessageQueue-next\" class=\"headerlink\" title=\"3.2 MessageQueue::next()\"></a>3.2 MessageQueue::next()</h2><p>为了分析处理同步屏障消息这种场景，现在假设所有的按时间顺序排在同步屏障消息之前的 Message 都已经被消费，换句话说，现在<strong>位于消息队列头部</strong>的 Message 就是同步屏障消息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Message <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">            Message prevMsg = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// mMessages 其实就是队列头部的 Message</span></span><br><span class=\"line\">            Message msg = mMessages;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 根据假设, 现在我们知道 msg 就是同步屏障消息, msg.target = null 成立, 会进入以下代码分支</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; msg.target == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// isAsynchronous() 方法可以判断一个 Message 是同步消息还是异步消息</span></span><br><span class=\"line\">                <span class=\"comment\">// 这个循环目的是找出一个异步消息, 将其赋值给 msg</span></span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                    prevMsg = msg;</span><br><span class=\"line\">                    msg = msg.next;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果找到目标 Message, 则进入以下代码分支</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (now &lt; msg.when) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 当目标 Message 触发时间大于当前时间, 则设置下一次轮询的超时时长</span></span><br><span class=\"line\">                    nextPollTimeoutMillis = (<span class=\"keyword\">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// 目标 Message 可以立即消费</span></span><br><span class=\"line\">                    mBlocked = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 这里对消息队列的操作, 目的是将目标 Message 从消息队列中移除</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (prevMsg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                      <span class=\"comment\">// 注意到, 在处理同步屏障消息的场景下, prevMsg 不可能是 null, 同步屏障消息不会被消费</span></span><br><span class=\"line\">                      <span class=\"comment\">// 在这里场景下, 被消费的总是异步消息</span></span><br><span class=\"line\">                        prevMsg.next = msg.next;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        mMessages = msg.next;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    msg.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) Log.v(TAG, <span class=\"string\">&quot;Returning message: &quot;</span> + msg);</span><br><span class=\"line\">                    msg.markInUse();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 返回异步消息</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 队列中没有可以消费的异步消息</span></span><br><span class=\"line\">                nextPollTimeoutMillis = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"3-3-小结\"><a href=\"#3-3-小结\" class=\"headerlink\" title=\"3.3 小结\"></a>3.3 小结</h2><p>通过上面的分析，可以得出一些结论：</p>\n<ul>\n<li>同步屏障的目的是：阻塞消息队列中同步消息的消费，<strong>只处理异步消息</strong>。</li>\n<li>在发起同步屏障之后，由于在消息队列中的<strong>同步屏障消息不会被自动消费</strong>，必须手动移除同步屏障。</li>\n<li>在没有同步屏障的场景下，同步消息和异步消息在<strong>从消息队列获取消息的过程</strong>中没有区别。</li>\n</ul>\n<h1 id=\"4-移除同步屏障\"><a href=\"#4-移除同步屏障\" class=\"headerlink\" title=\"4. 移除同步屏障\"></a>4. 移除同步屏障</h1><p>经过上面的分析，现在我们知道，在发起同步屏障之后，由于在消息队列中的<strong>同步屏障消息不会被自动消费</strong>，Android 提供了 MessageQueue::removeSyncBarrier(int) 方法让我们手动移除同步屏障，来看看这个方法做了什么。</p>\n<h2 id=\"4-1-MessageQueue-removeSyncBarrier-int\"><a href=\"#4-1-MessageQueue-removeSyncBarrier-int\" class=\"headerlink\" title=\"4.1 MessageQueue::removeSyncBarrier(int)\"></a>4.1 MessageQueue::removeSyncBarrier(int)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeSyncBarrier</span><span class=\"params\">(<span class=\"keyword\">int</span> token)</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">// 注意到这里需要加锁进行操作, 因为 removeSyncBarrier(int) 方法是有可能在多线程环境下调用</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        Message prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      \t<span class=\"comment\">// mMessages 是位于队列头部的 Message</span></span><br><span class=\"line\">        Message p = mMessages;</span><br><span class=\"line\"></span><br><span class=\"line\">      \t<span class=\"comment\">// 在发起同步屏障时, 新建 Message 实例的 arg1 属性存储的就是 token</span></span><br><span class=\"line\">      \t<span class=\"comment\">// 所以这个循环的目的是: 找到 token 相等的同步屏障消息, 将其赋值给 p</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; (p.target != <span class=\"keyword\">null</span> || p.arg1 != token)) &#123;</span><br><span class=\"line\">            prev = p;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          \t<span class=\"comment\">// 在找不到目标同步屏障消息时, 会抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;The specified message queue synchronization &quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; barrier token has not been posted or has already been removed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> needWake;</span><br><span class=\"line\"></span><br><span class=\"line\">      \t<span class=\"comment\">// 将目标同步屏障消息从消息队列中移除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            prev.next = p.next;</span><br><span class=\"line\">            needWake = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            mMessages = p.next;</span><br><span class=\"line\">            needWake = mMessages == <span class=\"keyword\">null</span> || mMessages.target != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.recycleUnchecked();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-2-小结\"><a href=\"#4-2-小结\" class=\"headerlink\" title=\"4.2 小结\"></a>4.2 小结</h2><p>从代码中可以看出，想要移除同步屏障，需要保存发起同步屏障 postSyncBarrier() 方法的返回值 token，根据 token 对应地移除同步屏障。</p>\n","site":{"data":{}},"excerpt":"<p>在 Android 系统源码中，多处使用了同步屏障。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ViewRootImpl.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTraversals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mTraversalScheduled) &#123;</span><br><span class=\"line\">        mTraversalScheduled = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发起同步屏障</span></span><br><span class=\"line\">        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 监听下一帧的信号</span></span><br><span class=\"line\">        mChoreographer.postCallback(</span><br><span class=\"line\">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是 Android 屏幕刷新过程中的一个操作，在调用 postCallback(int, Runnable, Object) 方法监听下一帧信号之前，首先向当前线程的消息队列发起了同步屏障。</p>\n<p>接下来我们通过对源码的解读，分析出同步屏障的作用到底是什么。</p>","more":"<h1 id=\"1-Message-的种类\"><a href=\"#1-Message-的种类\" class=\"headerlink\" title=\"1. Message 的种类\"></a>1. Message 的种类</h1><p>Message 中有一个 flag 变量，用于标记 Message 的类型。</p>\n<h2 id=\"1-1-Message-setAsynchronous-boolean\"><a href=\"#1-1-Message-setAsynchronous-boolean\" class=\"headerlink\" title=\"1.1 Message::setAsynchronous(boolean)\"></a>1.1 Message::setAsynchronous(boolean)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAsynchronous</span><span class=\"params\">(<span class=\"keyword\">boolean</span> async)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (async) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步消息, 通过或运算添加 FLAG_ASYNCHRONOUS 标记</span></span><br><span class=\"line\">        flags |= FLAG_ASYNCHRONOUS;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 同步消息, 通过与运算移除 FLAG_ASYNCHRONOUS 标记</span></span><br><span class=\"line\">        flags &amp;= ~FLAG_ASYNCHRONOUS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用 setAsynchronous(boolean) 方法，可以将 Message 设置为<strong>同步消息</strong>或者<strong>异步消息</strong>。</p>\n<h2 id=\"1-2-Message-isAsynchronous\"><a href=\"#1-2-Message-isAsynchronous\" class=\"headerlink\" title=\"1.2 Message::isAsynchronous()\"></a>1.2 Message::isAsynchronous()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAsynchronous</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过与运算判断 flags 是否带有 FLAG_ASYNCHRONOUS 标记</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (flags &amp; FLAG_ASYNCHRONOUS) != <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 isAsynchronous() 方法，可以判断 Message 是<strong>同步消息</strong>还是<strong>异步消息</strong>。</p>\n<p>由此可知，Message 可以分为两类：</p>\n<ul>\n<li>同步消息</li>\n<li>异步消息</li>\n</ul>\n<h1 id=\"2-发起同步屏障\"><a href=\"#2-发起同步屏障\" class=\"headerlink\" title=\"2. 发起同步屏障\"></a>2. 发起同步屏障</h1><p>在屏幕刷新的例子中，同步屏障是通过调用 MessageQueue::postSyncBarrier() 方法发起的，实际上是间接调用了 MessageQueue::postSyncBarrier(long) 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">postSyncBarrier</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> postSyncBarrier(SystemClock.uptimeMillis());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里传入的 SystemClock.uptimeMillis() 参数，表示了从系统启动到当前时刻经过的时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">postSyncBarrier</span><span class=\"params\">(<span class=\"keyword\">long</span> when)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意到这里需要加锁进行操作, 因为 postSyncBarrier() 方法是有可能在多线程环境下调用</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// mNextBarrierToken 是 int 类型, token 实际上是通过发起同步屏障次数来表示的</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> token = mNextBarrierToken++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 注意到 Message 实例是通过 Message.obtain() 方法获取的, 分析见小节2.1</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Message msg = Message.obtain();</span><br><span class=\"line\">        msg.markInUse();</span><br><span class=\"line\">        msg.when = when;</span><br><span class=\"line\">        msg.arg1 = token;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这里所做的就是按照消息执行时刻 when 排序, 将新建的 Message 实例插入到消息队列中对应的位置</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意到, 对于所以已在消息队列中的消息 p, 如果满足 p.when &lt;= when, 则消息 p 排在新建的 Message 之前, 优先处理消息 p</span></span><br><span class=\"line\">        Message prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Message p = mMessages;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (when != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.when &lt;= when) &#123;</span><br><span class=\"line\">                prev = p;</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// invariant: p == prev.next</span></span><br><span class=\"line\">            msg.next = p;</span><br><span class=\"line\">            prev.next = msg;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            msg.next = p;</span><br><span class=\"line\">            mMessages = msg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回特定的 token, 用于取消同步屏障, 分析见[小节4]</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-获取-Message-实例\"><a href=\"#2-1-获取-Message-实例\" class=\"headerlink\" title=\"2.1 获取 Message 实例\"></a>2.1 获取 Message 实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Message msg = Message.obtain();</span><br><span class=\"line\">msg.markInUse();</span><br><span class=\"line\">msg.when = when;</span><br><span class=\"line\">msg.arg1 = token;</span><br></pre></td></tr></table></figure>\n<p>Message 实例是通过 Message.obtain() 方法获取的，来看看这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Message <span class=\"title\">obtain</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (sPoolSync) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sPool != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Message m = sPool;</span><br><span class=\"line\">            sPool = m.next;</span><br><span class=\"line\">            m.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            m.flags = <span class=\"number\">0</span>; <span class=\"comment\">// clear in-use flag</span></span><br><span class=\"line\">            sPoolSize--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Message();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这个方法可以看出来，Message 实例是从缓存池中获取的，当缓存池没有可用的 Message 时，则新建一个 Message 对象。</p>\n<p>在获取到 Message 实例以后，将其标记为使用中，并设置 Message 的 when 和 arg1 属性。</p>\n<p>我们知道，Message 中有一个重要的属性 target，其类型为 Handler。当消息被消费时，用于处理该消息的 Handler 就是 message.target 指向的 Handler。</p>\n<p>但是，这里创建出的 Message 实例没有设置 target，也就是 message.target = null。</p>\n<h2 id=\"2-2-小结\"><a href=\"#2-2-小结\" class=\"headerlink\" title=\"2.2 小结\"></a>2.2 小结</h2><p>通过上面的分析，我们知道发起同步屏障其实就是将一个<strong>不带有 target 属性的 Message (接下来我将称之为同步屏障消息)</strong> 按照执行时间的先后顺序插入到消息队列中。</p>\n<p>现在消息队列中已经存在这样一个独特的消息，接着就需要分析 Android 是如何处理这种消息的。</p>\n<h1 id=\"3-处理同步屏障消息\"><a href=\"#3-处理同步屏障消息\" class=\"headerlink\" title=\"3. 处理同步屏障消息\"></a>3. 处理同步屏障消息</h1><p>在 Android Handler 机制中，Looper 负责将 Message 分发给目标 Handler，依靠的是 Looper::loop() 方法中不断执行的 for 循环 ，首先来分析这个方法是如何获取 Message。</p>\n<h2 id=\"3-1-Looper-loop\"><a href=\"#3-1-Looper-loop\" class=\"headerlink\" title=\"3.1 Looper::loop()\"></a>3.1 Looper::loop()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Looper me = myLooper();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        Message msg = queue.next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 省略消息的处理过程</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码可以看出，Looper 其实是从 MessageQueue 不断取出 Message，然后再对 Message 进行处理的。</p>\n<p>接着来分析 MessageQueue::next() 方法，了解 Message 是怎么获取的。</p>\n<h2 id=\"3-2-MessageQueue-next\"><a href=\"#3-2-MessageQueue-next\" class=\"headerlink\" title=\"3.2 MessageQueue::next()\"></a>3.2 MessageQueue::next()</h2><p>为了分析处理同步屏障消息这种场景，现在假设所有的按时间顺序排在同步屏障消息之前的 Message 都已经被消费，换句话说，现在<strong>位于消息队列头部</strong>的 Message 就是同步屏障消息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Message <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">            Message prevMsg = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// mMessages 其实就是队列头部的 Message</span></span><br><span class=\"line\">            Message msg = mMessages;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 根据假设, 现在我们知道 msg 就是同步屏障消息, msg.target = null 成立, 会进入以下代码分支</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; msg.target == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// isAsynchronous() 方法可以判断一个 Message 是同步消息还是异步消息</span></span><br><span class=\"line\">                <span class=\"comment\">// 这个循环目的是找出一个异步消息, 将其赋值给 msg</span></span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                    prevMsg = msg;</span><br><span class=\"line\">                    msg = msg.next;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果找到目标 Message, 则进入以下代码分支</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (now &lt; msg.when) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 当目标 Message 触发时间大于当前时间, 则设置下一次轮询的超时时长</span></span><br><span class=\"line\">                    nextPollTimeoutMillis = (<span class=\"keyword\">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// 目标 Message 可以立即消费</span></span><br><span class=\"line\">                    mBlocked = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 这里对消息队列的操作, 目的是将目标 Message 从消息队列中移除</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (prevMsg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                      <span class=\"comment\">// 注意到, 在处理同步屏障消息的场景下, prevMsg 不可能是 null, 同步屏障消息不会被消费</span></span><br><span class=\"line\">                      <span class=\"comment\">// 在这里场景下, 被消费的总是异步消息</span></span><br><span class=\"line\">                        prevMsg.next = msg.next;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        mMessages = msg.next;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    msg.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) Log.v(TAG, <span class=\"string\">&quot;Returning message: &quot;</span> + msg);</span><br><span class=\"line\">                    msg.markInUse();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 返回异步消息</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 队列中没有可以消费的异步消息</span></span><br><span class=\"line\">                nextPollTimeoutMillis = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"3-3-小结\"><a href=\"#3-3-小结\" class=\"headerlink\" title=\"3.3 小结\"></a>3.3 小结</h2><p>通过上面的分析，可以得出一些结论：</p>\n<ul>\n<li>同步屏障的目的是：阻塞消息队列中同步消息的消费，<strong>只处理异步消息</strong>。</li>\n<li>在发起同步屏障之后，由于在消息队列中的<strong>同步屏障消息不会被自动消费</strong>，必须手动移除同步屏障。</li>\n<li>在没有同步屏障的场景下，同步消息和异步消息在<strong>从消息队列获取消息的过程</strong>中没有区别。</li>\n</ul>\n<h1 id=\"4-移除同步屏障\"><a href=\"#4-移除同步屏障\" class=\"headerlink\" title=\"4. 移除同步屏障\"></a>4. 移除同步屏障</h1><p>经过上面的分析，现在我们知道，在发起同步屏障之后，由于在消息队列中的<strong>同步屏障消息不会被自动消费</strong>，Android 提供了 MessageQueue::removeSyncBarrier(int) 方法让我们手动移除同步屏障，来看看这个方法做了什么。</p>\n<h2 id=\"4-1-MessageQueue-removeSyncBarrier-int\"><a href=\"#4-1-MessageQueue-removeSyncBarrier-int\" class=\"headerlink\" title=\"4.1 MessageQueue::removeSyncBarrier(int)\"></a>4.1 MessageQueue::removeSyncBarrier(int)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeSyncBarrier</span><span class=\"params\">(<span class=\"keyword\">int</span> token)</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">// 注意到这里需要加锁进行操作, 因为 removeSyncBarrier(int) 方法是有可能在多线程环境下调用</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        Message prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      \t<span class=\"comment\">// mMessages 是位于队列头部的 Message</span></span><br><span class=\"line\">        Message p = mMessages;</span><br><span class=\"line\"></span><br><span class=\"line\">      \t<span class=\"comment\">// 在发起同步屏障时, 新建 Message 实例的 arg1 属性存储的就是 token</span></span><br><span class=\"line\">      \t<span class=\"comment\">// 所以这个循环的目的是: 找到 token 相等的同步屏障消息, 将其赋值给 p</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; (p.target != <span class=\"keyword\">null</span> || p.arg1 != token)) &#123;</span><br><span class=\"line\">            prev = p;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          \t<span class=\"comment\">// 在找不到目标同步屏障消息时, 会抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">&quot;The specified message queue synchronization &quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot; barrier token has not been posted or has already been removed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> needWake;</span><br><span class=\"line\"></span><br><span class=\"line\">      \t<span class=\"comment\">// 将目标同步屏障消息从消息队列中移除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            prev.next = p.next;</span><br><span class=\"line\">            needWake = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            mMessages = p.next;</span><br><span class=\"line\">            needWake = mMessages == <span class=\"keyword\">null</span> || mMessages.target != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.recycleUnchecked();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-2-小结\"><a href=\"#4-2-小结\" class=\"headerlink\" title=\"4.2 小结\"></a>4.2 小结</h2><p>从代码中可以看出，想要移除同步屏障，需要保存发起同步屏障 postSyncBarrier() 方法的返回值 token，根据 token 对应地移除同步屏障。</p>"}],"PostAsset":[{"_id":"source/_posts/2021-03-10-elementary-function/constant-function-example-1.png","slug":"constant-function-example-1.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-10-elementary-function/exponential-function-example-1.png","slug":"exponential-function-example-1.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-10-elementary-function/exponential-function-example-2.png","slug":"exponential-function-example-2.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-10-elementary-function/logarithmic-function-example-1.png","slug":"logarithmic-function-example-1.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-10-elementary-function/logarithmic-function-example-2.png","slug":"logarithmic-function-example-2.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-10-elementary-function/logarithmic-function-example-3.png","slug":"logarithmic-function-example-3.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-1.png","slug":"power-function-example-1.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-2.png","slug":"power-function-example-2.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-3.png","slug":"power-function-example-3.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-4.png","slug":"power-function-example-4.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-5.png","slug":"power-function-example-5.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-6.png","slug":"power-function-example-6.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0},{"_id":"source/_posts/2021-03-10-elementary-function/power-function-example-7.png","slug":"power-function-example-7.png","post":"ckmqajiie0008osprb5kc17rb","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckmqajii40001ospr0qia225f","category_id":"ckmqajiib0005ospremgw2dg8","_id":"ckmqajiil000jospr0qsq9ljn"},{"post_id":"ckmqajii40001ospr0qia225f","category_id":"ckmqajiih000bosprb8jef83j","_id":"ckmqajiil000kospr36qxgw49"},{"post_id":"ckmqajiie0008osprb5kc17rb","category_id":"ckmqajiij000fosprhs8j4mpk","_id":"ckmqajiim000mosprcxsn9d59"},{"post_id":"ckmqajiif0009ospr0rvvdz1m","category_id":"ckmqajiik000hosprhv435b47","_id":"ckmqajiio000rospr5dvf9zhe"},{"post_id":"ckmqajiif0009ospr0rvvdz1m","category_id":"ckmqajiim000nosprdm7f6175","_id":"ckmqajiio000sospr23cl1l9l"},{"post_id":"ckmqajiif0009ospr0rvvdz1m","category_id":"ckmqajiin000posprc39tdg8b","_id":"ckmqajiio000tosprb6cw21fm"},{"post_id":"ckmqajiii000dospr0k5u6zhd","category_id":"ckmqajiik000hosprhv435b47","_id":"ckmqajiio000uospr8sgb8uyp"},{"post_id":"ckmqajiii000dospr0k5u6zhd","category_id":"ckmqajiim000nosprdm7f6175","_id":"ckmqajiio000vospr130pg0jm"},{"post_id":"ckmqajiii000dospr0k5u6zhd","category_id":"ckmqajiin000qosprhvu1dtdp","_id":"ckmqajiio000wospre3t62h61"}],"PostTag":[{"post_id":"ckmqajii80003ospr3h2i8ckx","tag_id":"ckmqajiic0006osprcljrdpxc","_id":"ckmqajiii000cospr8g25c7p6"},{"post_id":"ckmqajiia0004ospr77rd88mm","tag_id":"ckmqajiic0006osprcljrdpxc","_id":"ckmqajiik000gospraxp6cm5j"},{"post_id":"ckmqajiid0007osprhhlkendk","tag_id":"ckmqajiij000eosprg0hcfngw","_id":"ckmqajiil000iospreahnbary"}],"Tag":[{"name":"Test","_id":"ckmqajiic0006osprcljrdpxc"},{"name":"ComputerScience","_id":"ckmqajiij000eosprg0hcfngw"}]}}